{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header'; //import bubblesort from './algorithms/bubblesort';\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"; //const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      array2: [],\n      array3: [],\n      array4: [],\n      auxArray: [],\n      active1: 101,\n      active2: 101,\n      active21: 101,\n      active22: 101,\n      active31: 101,\n      active32: 101,\n      active41: 101,\n      active42: 101,\n      algorithm: 'bubblesort',\n      algorithm2: 'insertionsort',\n      algorithm3: 'selectionsort',\n      algorithm4: 'heapsort'\n    };\n\n    this.handleNewArray = () => {\n      const arr = [];\n\n      for (var i = 0; i < 100; i++) {\n        var rand = Math.ceil(Math.random() * 100);\n        arr.push({\n          key: i,\n          value: rand\n        });\n      }\n\n      this.setState({\n        array: arr.slice(),\n        array2: arr.slice(),\n        array3: arr.slice(),\n        array4: arr.slice()\n      });\n    };\n\n    this.algorithmSelection = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.timer = ms => {\n      return new Promise(res => setTimeout(res, ms));\n    };\n\n    this.bubblesort = async (list, square) => {\n      const [active1, active2, array] = this.getUpdateables(square);\n      const length = list.length;\n\n      for (var i = length - 1; i >= 0; i--) {\n        for (var j = 1; j <= i; j++) {\n          if (list[j - 1].value > list[j].value) {\n            let temp = list[j - 1];\n            list[j - 1] = list[j];\n            list[j] = temp;\n          }\n\n          this.setState({\n            [array]: list,\n            [active1]: list[j - 1].key,\n            [active2]: list[j].key\n          });\n          await this.timer(15);\n        }\n\n        this.setState({\n          [active1]: 101,\n          [active2]: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.selectionsort = async (list, square) => {\n      const [active1, active2, array] = this.getUpdateables(square);\n      let length = list.length;\n\n      for (var i = 0; i < length; i++) {\n        var min = i;\n\n        for (var j = i + 1; j < length; j++) {\n          // Executing statement comparison\n          if (list[min].value > list[j].value) {\n            // Updating our current min index to iterate\n            min = j;\n          }\n\n          this.setState({\n            [array]: list,\n            [active1]: list[j].key,\n            [active2]: list[min].key\n          });\n          await this.timer(15);\n        } // Swaping values\n\n\n        if (min !== i) {\n          let temp = list[i];\n          list[i] = list[min];\n          list[min] = temp;\n        }\n      }\n\n      this.setState({\n        [active1]: 101,\n        [active2]: 101\n      });\n      return list;\n    };\n\n    this.insertionsort = async (list, square) => {\n      const [active1, active2, array] = this.getUpdateables(square);\n      let auxArray = list.slice();\n      let length = auxArray.length;\n\n      for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            [array]: auxArray,\n            [active1]: auxArray[j].key,\n            [active2]: auxArray[i].key\n          });\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {\n            key: 100,\n            value: auxArray[j].value\n          };\n          j--;\n        }\n\n        auxArray[j + 1] = key;\n      } //get rid of active \"red\" bars\n\n\n      this.setState({\n        [array]: auxArray,\n        [active1]: 101,\n        [active2]: 101\n      });\n    };\n\n    this.mergesort = async (list, square) => {\n      const [active1, active2, array] = this.getUpdateables(square);\n      var n = list.length;\n      var m = 1;\n      var right;\n      var left;\n      var sorted;\n      var maxIndex; //var auxArray; \n\n      while (m < n) {\n        var i = 0;\n\n        while (i < n - m) {\n          //slice\n          left = list.slice(i, i + m);\n          maxIndex = Math.min(i + 2 * m, n);\n          right = list.slice(i + m, maxIndex);\n          sorted = []; //auxArray = [];\n          //merge\n\n          while (left.length && right.length) {\n            await this.timer(15);\n\n            if (left[0].value <= right[0].value) {\n              sorted.push(left.shift());\n            } else {\n              sorted.push(right.shift());\n            }\n          }\n\n          while (left.length) {\n            sorted.push(left.shift());\n          }\n\n          while (right.length) {\n            sorted.push(right.shift());\n          } //recreate list, with sorted part\n\n\n          var x = list.slice(0, i);\n          var y = list.slice(maxIndex, list.length);\n          list = x.concat(sorted, y);\n          await this.timer(15);\n          this.setState({\n            [array]: list,\n            [active1]: list[i].key,\n            [active2]: list[maxIndex - 1].key\n          });\n          i = i + 2 * m;\n        }\n\n        m = m * 2;\n        this.setState({\n          [active1]: 101,\n          [active2]: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.swap = (items, leftIndex, rightIndex) => {\n      var temp = items[leftIndex];\n      items[leftIndex] = items[rightIndex];\n      items[rightIndex] = temp;\n    };\n\n    this.heapsort = async (list, square) => {\n      const [active1, active2, array] = this.getUpdateables(square);\n\n      for (var i = 1; i < list.length; i++) {\n        //if child is bigger than parent\n        if (list[i].value > list[parseInt((i - 1) / 2)].value) {\n          var j = i; //while parent is smaller, swap child and parent\n\n          while (list[j].value > list[parseInt((j - 1) / 2)].value) {\n            var temp = list[j];\n            list[j] = list[parseInt((j - 1) / 2)];\n            list[parseInt((j - 1) / 2)] = temp;\n            this.setState({\n              [array]: list,\n              [active1]: i,\n              [active2]: j\n            });\n            j = parseInt((j - 1) / 2);\n            await this.timer(15);\n          }\n        }\n      }\n\n      var length = list.length;\n\n      for (var i = length - 1; i > 0; i--) {\n        //swap value of first index with last index\n        temp = list[0];\n        list[0] = list[i];\n        list[i] = temp; //maintaining heap property, after each swap \n\n        j = 0;\n        var index;\n\n        while (true) {\n          await this.timer(15);\n          index = 2 * j + 1; //if left child is smaller than right child, point index to right child\n\n          if (index < i - 1 && list[index].value < list[index + 1].value) {\n            index++;\n          } //if parent is smaller than child, swap them with child having higher value\n\n\n          if (index < i && list[j].value < list[index].value) {\n            temp = list[j];\n            list[j] = list[index];\n            list[index] = temp;\n          }\n\n          this.setState({\n            [array]: list,\n            [active1]: list[i].key,\n            [active2]: list[j].key\n          });\n          j = index;\n\n          if (index >= i) {\n            break;\n          }\n        }\n      }\n\n      this.setState({\n        [array]: list,\n        [active1]: 101,\n        [active2]: 101\n      });\n    };\n\n    this.quicksort = async (list, square) => {\n      const [active1, active2, array] = this.getUpdateables(square);\n      var low = 0;\n      var high = list.length - 1;\n      var size = high - low + 1; //create auxiliary stack\n\n      var stack = new Array(size); //initialize top of the stack\n\n      var top = -1; //push initial values of high and low to the stack\n\n      stack[++top] = low;\n      stack[++top] = high;\n\n      while (top >= 0) {\n        high = stack[top--];\n        low = stack[top--]; //set pivot element in its correct position, in sorted array\n        // partition method\n\n        var p = list[high];\n        var i = low - 1;\n\n        for (var j = low; j <= high - 1; j++) {\n          if (list[j].value <= p.value) {\n            i++;\n            await this.timer(20);\n            this.swap(list, i, j);\n            this.setState({\n              [array]: list,\n              [active1]: p.key,\n              [active2]: j\n            });\n          }\n        }\n\n        this.swap(list, i + 1, high);\n        var pivot = i + 1; //end of partition \n\n        await this.timer(20);\n        this.setState({\n          [array]: list,\n          [active1]: high,\n          [active2]: low\n        }); //if there are elements on left side of pivot, push left side to stack\n\n        if (pivot - 1 > low) {\n          stack[++top] = low;\n          stack[++top] = pivot - 1;\n        } //if there are elements on right side of pivot, push right side to stack\n\n\n        if (pivot + 1 < high) {\n          stack[++top] = pivot + 1;\n          stack[++top] = high;\n        }\n      }\n\n      this.setState({\n        [array]: list,\n        [active1]: 101,\n        [active2]: 101\n      });\n      return stack;\n    };\n\n    this.getUpdateables = ind => {\n      if (ind === 1) {\n        return ['active1', 'active2', 'array'];\n      } else if (ind === 2) {\n        return ['active21', 'active22', 'array2'];\n      } else if (ind === 3) {\n        return ['active31', 'active32', 'array3'];\n      } else if (ind === 4) {\n        return ['active41', 'active42', 'array4'];\n      }\n    };\n\n    this.onStart = () => {\n      let algorithm = this.state.algorithm;\n      let algorithm2 = this.state.algorithm2;\n      let algorithm3 = this.state.algorithm3;\n      let algorithm4 = this.state.algorithm4;\n\n      if (algorithm === 'bubblesort') {\n        this.bubblesort(this.state.array, 1);\n      } else if (algorithm === 'selectionsort') {\n        this.selectionsort(this.state.array, 1);\n      } else if (algorithm === 'insertionsort') {\n        this.insertionsort(this.state.array, 1);\n      } else if (algorithm === 'mergesort') {\n        this.mergesort(this.state.array, 1);\n      } else if (algorithm === 'heapsort') {\n        this.heapsort(this.state.array, 1);\n      } else if (algorithm === 'quicksort') {\n        this.quicksort(this.state.array, 1);\n      }\n\n      if (algorithm2 === 'bubblesort') {\n        this.bubblesort(this.state.array2, 2);\n      } else if (algorithm2 === 'selectionsort') {\n        this.selectionsort(this.state.array2, 2);\n      } else if (algorithm2 === 'insertionsort') {\n        this.insertionsort(this.state.array2, 2);\n      } else if (algorithm2 === 'mergesort') {\n        this.mergesort(this.state.array2, 2);\n      } else if (algorithm2 === 'heapsort') {\n        this.heapsort(this.state.array2, 2);\n      } else if (algorithm2 === 'quicksort') {\n        this.quicksort(this.state.array2, 2);\n      }\n\n      if (algorithm3 === 'bubblesort') {\n        this.bubblesort(this.state.array3, 3);\n      } else if (algorithm3 === 'selectionsort') {\n        this.selectionsort(this.state.array3, 3);\n      } else if (algorithm3 === 'insertionsort') {\n        this.insertionsort(this.state.array3, 3);\n      } else if (algorithm3 === 'mergesort') {\n        this.mergesort(this.state.array3, 3);\n      } else if (algorithm3 === 'heapsort') {\n        this.heapsort(this.state.array3, 3);\n      } else if (algorithm3 === 'quicksort') {\n        this.quicksort(this.state.array3, 3);\n      }\n\n      if (algorithm4 === 'bubblesort') {\n        this.bubblesort(this.state.array3, 4);\n      } else if (algorithm4 === 'selectionsort') {\n        this.selectionsort(this.state.array4, 4);\n      } else if (algorithm4 === 'insertionsort') {\n        this.insertionsort(this.state.array4, 4);\n      } else if (algorithm4 === 'mergesort') {\n        this.mergesort(this.state.array4, 4);\n      } else if (algorithm4 === 'heapsort') {\n        this.heapsort(this.state.array4, 4);\n      } else if (algorithm4 === 'quicksort') {\n        this.quicksort(this.state.array4, 4);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.handleNewArray();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleNewArray: this.handleNewArray,\n      onStart: this.onStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/doubleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DoubleContainer, {\n      array: this.state.array,\n      array2: this.state.array2,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      active21: this.state.active21,\n      active22: this.state.active22,\n      algorithm: this.state.algorithm,\n      algorithm2: this.state.algorithm2,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/multipleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultipleContainer, {\n      array: this.state.array,\n      array2: this.state.array2,\n      array3: this.state.array3,\n      array4: this.state.array4,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      active21: this.state.active21,\n      active22: this.state.active22,\n      active31: this.state.active31,\n      active32: this.state.active32,\n      active41: this.state.active41,\n      active42: this.state.active42,\n      algorithm: this.state.algorithm,\n      algorithm2: this.state.algorithm2,\n      algorithm3: this.state.algorithm3,\n      algorithm4: this.state.algorithm4,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SingleContainer, {\n      array: this.state.array,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      algorithm: this.state.algorithm,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js"],"names":["React","SingleContainer","DoubleContainer","MultipleContainer","Header","HashRouter","Router","Switch","Route","App","Component","state","array","array2","array3","array4","auxArray","active1","active2","active21","active22","active31","active32","active41","active42","algorithm","algorithm2","algorithm3","algorithm4","handleNewArray","arr","i","rand","Math","ceil","random","push","key","value","setState","slice","algorithmSelection","event","target","name","timer","ms","Promise","res","setTimeout","bubblesort","list","square","getUpdateables","length","j","temp","selectionsort","min","insertionsort","mergesort","n","m","right","left","sorted","maxIndex","shift","x","y","concat","swap","items","leftIndex","rightIndex","heapsort","parseInt","index","quicksort","low","high","size","stack","Array","top","p","pivot","ind","onStart","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header';\n//import bubblesort from './algorithms/bubblesort';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n//const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  state = {\n    array: [], \n    array2: [],\n    array3: [],\n    array4: [],\n    auxArray: [],\n    active1: 101,\n    active2: 101,\n    active21: 101,\n    active22: 101,\n    active31: 101,\n    active32: 101,\n    active41: 101,\n    active42: 101,\n    algorithm: 'bubblesort',\n    algorithm2: 'insertionsort',\n    algorithm3: 'selectionsort',\n    algorithm4: 'heapsort',\n  }\n\n  handleNewArray = () => {\n    const arr = [];\n    for (var i = 0; i<100; i++){\n      var rand = Math.ceil(Math.random() * 100);\n      arr.push({key: i, value: rand});\n    }\n    this.setState({\n      array: arr.slice(), \n      array2: arr.slice(),\n      array3: arr.slice(),\n      array4: arr.slice()\n    })\n  }\n\n  componentDidMount(){\n    this.handleNewArray();\n  }\n\n  algorithmSelection = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  timer = (ms) => {\n    return new Promise(res => setTimeout(res, ms));\n  }\n\n  //bubble sort\n  bubblesort = async (list, square) => {\n    const [active1, active2, array] = this.getUpdateables(square); \n    const length = list.length;\n    for(var i = length - 1; i>=0; i--){\n      for(var j = 1; j<=i; j++){\n        \n        if(list[j-1].value > list[j].value){\n          let temp = list[j-1];\n          list[j-1] = list[j];\n          list[j] = temp;\n        }\n        this.setState({\n          [array]: list,\n          [active1]: list[j-1].key,\n          [active2]: list[j].key\n        })\n        await this.timer(15);\n      }\n      this.setState({\n        [active1]: 101,\n        [active2]: 101\n      })\n    }\n    return list\n  }\n\n  selectionsort = async (list, square) => {\n    const [active1, active2, array] = this.getUpdateables(square);\n    let length = list.length;\n  \n    for(var i = 0; i < length; i++) {\n        \n        var min = i;\n        for(var j = i + 1; j < length; j++) {\n            // Executing statement comparison\n            if(list[min].value > list[j].value) {\n                // Updating our current min index to iterate\n                min = j;\n            }\n            this.setState({\n              [array]: list,\n              [active1]: list[j].key,\n              [active2]: list[min].key\n            })\n            await this.timer(15)\n        }\n        \n        // Swaping values\n        if(min !== i) {\n            let temp = list[i];\n            list[i] = list[min];\n            list[min] = temp;\n        }\n    }\n    this.setState({\n      [active1]: 101,\n      [active2]: 101\n    })\n  \n    return list;\n  }\n\n  insertionsort = async (list, square) => {\n    const [active1, active2, array] = this.getUpdateables(square);\n    let auxArray = list.slice();\n    let length = auxArray.length;\n    \n    for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            [array]: auxArray,\n            [active1]: auxArray[j].key,\n            [active2]: auxArray[i].key\n          })\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {key: 100, value: auxArray[j].value};\n          j--;\n        }\n        auxArray[j + 1] = key;\n    }\n    \n    //get rid of active \"red\" bars\n    this.setState({\n      [array]: auxArray,\n      [active1]: 101,\n      [active2]: 101\n    })\n  }\n\n  mergesort = async (list, square) => {\n    const [active1, active2, array] = this.getUpdateables(square);\n    var n = list.length;\n    var m = 1;\n    var right;\n    var left;\n    var sorted; \n    var maxIndex;\n    //var auxArray; \n\n    while (m < n){\n      var i = 0;\n      while(i< n - m){\n        //slice\n        left = list.slice(i, i+m);\n        maxIndex = Math.min(i+2*m, n);\n        right = list.slice(i+m, maxIndex);\n        sorted = [];\n        //auxArray = [];\n\n        //merge\n        while(left.length && right.length){\n          await this.timer(15);\n          \n          if(left[0].value <= right[0].value){\n            sorted.push(left.shift());\n          }else{\n            sorted.push(right.shift());\n          }\n\n        }\n\n        while(left.length){\n          sorted.push(left.shift());\n        }\n\n        while(right.length){\n          sorted.push(right.shift());\n        }\n\n\n\n        //recreate list, with sorted part\n        var x = list.slice(0, i);\n        var y = list.slice(maxIndex, list.length);\n        list = x.concat(sorted, y);\n        \n        await this.timer(15);\n        this.setState({\n          [array]: list,\n          [active1]: list[i].key,\n          [active2]: list[maxIndex-1].key\n        });\n\n        i = i + 2*m\n      }\n      m = m * 2;\n\n      this.setState({\n        [active1]: 101,\n        [active2]: 101\n      })\n    }\n    return list\n  }\n\n\n  swap = (items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n  }\n\n\n  heapsort = async (list, square) => {\n    const [active1, active2, array] = this.getUpdateables(square);\n\n    for (var i = 1; i<list.length; i++){\n      //if child is bigger than parent\n      if(list[i].value > list[parseInt((i-1)/2)].value){\n        var j = i;\n\n        //while parent is smaller, swap child and parent\n        while(list[j].value > list[parseInt((j-1)/2)].value){\n          var temp = list[j];\n          list[j] = list[parseInt((j-1)/2)];\n          list[parseInt((j-1)/2)] = temp;\n\n          this.setState({\n            [array]: list,\n            [active1]: i,\n            [active2]: j\n          });\n          j = parseInt((j - 1) / 2);\n          await this.timer(15)\n        }\n      }\n    }\n   \n    var length = list.length;\n\n    for(var i = length - 1; i>0; i--){\n      //swap value of first index with last index\n      temp = list[0];\n      list[0] = list[i];\n      list[i] = temp;\n\n      //maintaining heap property, after each swap \n      j = 0;\n      var index;\n\n      while(true){\n        await this.timer(15);\n        \n        index = 2*j+1;\n\n        //if left child is smaller than right child, point index to right child\n        if(index < (i - 1) && list[index].value < list[index + 1].value){\n          index++;\n        }\n\n        //if parent is smaller than child, swap them with child having higher value\n        if(index < i && list[j].value < list[index].value){\n          temp = list[j];\n          list[j] = list[index];\n          list[index] = temp;\n        }\n        this.setState({\n          [array]: list,\n          [active1]: list[i].key,\n          [active2]: list[j].key\n        });\n\n        j = index;\n        if(index >= i){\n          break;\n        }\n      }\n    }\n    this.setState({\n      [array]: list,\n      [active1]: 101,\n      [active2]: 101\n    });\n  }\n\n\n  quicksort = async (list, square) => {\n    const [active1, active2, array] = this.getUpdateables(square);\n    var low = 0;\n    var high = list.length - 1;\n    var size = high - low + 1;\n\n    //create auxiliary stack\n    var stack = new Array(size);\n\n    //initialize top of the stack\n    var top = -1;\n\n    //push initial values of high and low to the stack\n    stack[++top] = low;\n    stack[++top] = high;\n\n    while(top >= 0){\n      high = stack[top--];\n      low = stack[top--];\n\n      //set pivot element in its correct position, in sorted array\n\n      // partition method\n      var p = list[high];\n      var i = low - 1;\n\n      for(var j = low; j<=high-1; j++){\n        if(list[j].value <= p.value){\n          i++;\n          await this.timer(20);\n          this.swap(list, i, j);\n          \n\n          this.setState({\n            [array]: list,\n            [active1]: p.key,\n            [active2]: j\n          })          \n        }\n      } \n\n      this.swap(list, i+1, high);\n      var pivot = i + 1;\n\n      //end of partition \n\n      await this.timer(20);\n      this.setState({\n        [array]: list,\n        [active1]: high,\n        [active2]: low\n      })\n\n      //if there are elements on left side of pivot, push left side to stack\n      if (pivot - 1 > low){\n        stack[++top] = low;\n        stack[++top] = pivot - 1;\n      }\n\n      //if there are elements on right side of pivot, push right side to stack\n      if (pivot+1 < high){\n        stack[++top] = pivot + 1;\n        stack[++top] = high;\n      }\n    }\n    this.setState({\n      [array]: list,\n      [active1]: 101,\n      [active2]: 101\n    })\n    return stack;\n  }\n\n  getUpdateables = (ind) => {\n    if (ind === 1){\n      return ['active1', 'active2', 'array'];\n    }else if (ind === 2){\n      return ['active21', 'active22', 'array2'];\n    }else if(ind === 3){\n      return ['active31', 'active32', 'array3'];\n    }else if (ind === 4){\n      return ['active41', 'active42', 'array4'];\n    }\n  }\n\n\n  onStart = () => {\n    let algorithm = this.state.algorithm;\n    let algorithm2 = this.state.algorithm2;\n    let algorithm3 = this.state.algorithm3;\n    let algorithm4 = this.state.algorithm4;\n\n    if(algorithm === 'bubblesort'){\n      this.bubblesort(this.state.array, 1)\n    }else if (algorithm === 'selectionsort') {\n      this.selectionsort(this.state.array, 1);\n    }else if(algorithm === 'insertionsort'){\n      this.insertionsort(this.state.array, 1);\n    }else if(algorithm === 'mergesort'){\n      this.mergesort(this.state.array, 1);\n    }else if(algorithm === 'heapsort'){\n      this.heapsort(this.state.array, 1);\n    }else if(algorithm === 'quicksort'){\n      this.quicksort(this.state.array, 1);\n    }\n\n    if(algorithm2 === 'bubblesort'){\n      this.bubblesort(this.state.array2, 2);\n    }else if (algorithm2 === 'selectionsort') {\n      this.selectionsort(this.state.array2, 2);\n    }else if(algorithm2 === 'insertionsort'){\n      this.insertionsort(this.state.array2, 2);\n    }else if(algorithm2 === 'mergesort'){\n      this.mergesort(this.state.array2, 2);\n    }else if(algorithm2 === 'heapsort'){\n      this.heapsort(this.state.array2, 2);\n    }else if(algorithm2 === 'quicksort'){\n      this.quicksort(this.state.array2, 2);\n    }\n\n    if(algorithm3 === 'bubblesort'){\n      this.bubblesort(this.state.array3, 3);\n    }else if (algorithm3 === 'selectionsort') {\n      this.selectionsort(this.state.array3, 3);\n    }else if(algorithm3 === 'insertionsort'){\n      this.insertionsort(this.state.array3, 3);\n    }else if(algorithm3 === 'mergesort'){\n      this.mergesort(this.state.array3, 3);\n    }else if(algorithm3 === 'heapsort'){\n      this.heapsort(this.state.array3, 3);\n    }else if(algorithm3 === 'quicksort'){\n      this.quicksort(this.state.array3, 3);\n    }\n\n    if(algorithm4 === 'bubblesort'){\n      this.bubblesort(this.state.array3, 4);\n    }else if (algorithm4 === 'selectionsort') {\n      this.selectionsort(this.state.array4, 4);\n    }else if(algorithm4 === 'insertionsort'){\n      this.insertionsort(this.state.array4, 4);\n    }else if(algorithm4 === 'mergesort'){\n      this.mergesort(this.state.array4, 4);\n    }else if(algorithm4 === 'heapsort'){\n      this.heapsort(this.state.array4, 4);\n    }else if(algorithm4 === 'quicksort'){\n      this.quicksort(this.state.array4, 4);\n    }\n  }\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header handleNewArray={this.handleNewArray} onStart={this.onStart}/>\n          <Switch>\n            <Route path='/doubleContainer'> \n              <DoubleContainer \n                array={this.state.array} \n                array2={this.state.array2}\n                active1={this.state.active1}\n                active2={this.state.active2}\n                active21={this.state.active21}\n                active22={this.state.active22}\n                algorithm={this.state.algorithm}\n                algorithm2={this.state.algorithm2}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n            <Route path='/multipleContainer'> \n              <MultipleContainer \n                array={this.state.array} \n                array2={this.state.array2}\n                array3={this.state.array3} \n                array4={this.state.array4}\n                active1={this.state.active1}\n                active2={this.state.active2}\n                active21={this.state.active21}\n                active22={this.state.active22}\n                active31={this.state.active31}\n                active32={this.state.active32}\n                active41={this.state.active41}\n                active42={this.state.active42}\n                algorithm={this.state.algorithm}\n                algorithm2={this.state.algorithm2}\n                algorithm3={this.state.algorithm3}\n                algorithm4={this.state.algorithm4}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n            <Route path='/'> \n              <SingleContainer array={this.state.array} \n                active1={this.state.active1}\n                active2={this.state.active2}\n                algorithm={this.state.algorithm}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}