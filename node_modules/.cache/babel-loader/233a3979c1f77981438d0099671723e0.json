{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header'; //import bubblesort from './algorithms/bubblesort';\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"; //const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      animationArray: [],\n      auxArray: [],\n      active1: 101,\n      active2: 101,\n      algorithm: 'bubblesort',\n      active: true,\n      sorted: false\n    };\n\n    this.testAnimation = () => {\n      if (this.state.active) {\n        this.setState({\n          algorithm: 'insertionsort',\n          active: !this.state.active\n        });\n      } else {\n        this.setState({\n          algorithm: 'selectionsort',\n          active: !this.state.active\n        });\n      } //requestAnimationFrame(this.testAnimation)\n\n    };\n\n    this.handleNewArray = () => {\n      const arr = [];\n\n      for (var i = 0; i < 100; i++) {\n        var rand = Math.ceil(Math.random() * 100);\n        arr.push({\n          key: i,\n          value: rand\n        });\n      }\n\n      this.setState({\n        array: arr\n      });\n    };\n\n    this.algorithmSelection = event => {\n      this.setState({\n        algorithm: event.target.value\n      });\n    };\n\n    this.timer = ms => {\n      return new Promise(res => setTimeout(res, ms));\n    };\n\n    this.bubblesort = async (list, delay) => {\n      const length = list.length;\n\n      for (var i = length - 1; i >= 0; i--) {\n        for (var j = 1; j <= i; j++) {\n          if (list[j - 1].value > list[j].value) {\n            let temp = list[j - 1];\n            list[j - 1] = list[j];\n            list[j] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j - 1].key,\n            active2: list[j].key\n          });\n          await this.timer(15);\n        }\n\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.selectionsort = async list => {\n      let length = list.length;\n\n      for (var i = 0; i < length; i++) {\n        var min = i;\n\n        for (var j = i + 1; j < length; j++) {\n          // Executing statement comparison\n          if (list[min].value > list[j].value) {\n            // Updating our current min index to iterate\n            min = j;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j].key,\n            active2: list[min].key\n          });\n          await this.timer(5);\n        } // Swaping values\n\n\n        if (min !== i) {\n          let temp = list[i];\n          list[i] = list[min];\n          list[min] = temp;\n        }\n      }\n\n      this.setState({\n        active1: 100,\n        active2: 100\n      });\n      return list;\n    };\n\n    this.insertionsort = async list => {\n      let auxArray = list.slice();\n      let length = auxArray.length;\n\n      for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          });\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {\n            key: 100,\n            value: auxArray[j].value\n          };\n          j--;\n        }\n\n        auxArray[j + 1] = key;\n      } //get rid of active \"red\" bars\n\n\n      this.setState({\n        array: auxArray,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.delayLoop = (fn, delay) => {\n      return name => {\n        setTimeout(() => {\n          fn(name);\n        }, delay * 1000);\n      };\n    };\n\n    this.mergesort = async list => {\n      var n = list.length;\n      var m = 1;\n      var right;\n      var left;\n      var sorted;\n      var maxIndex; //var auxArray; \n\n      while (m < n) {\n        var i = 0;\n\n        while (i < n - m) {\n          //slice\n          left = list.slice(i, i + m);\n          maxIndex = Math.min(i + 2 * m, n);\n          right = list.slice(i + m, maxIndex);\n          sorted = []; //auxArray = [];\n          //merge\n\n          while (left.length && right.length) {\n            if (left[0].value <= right[0].value) {\n              sorted.push(left.shift());\n            } else {\n              sorted.push(right.shift());\n            }\n          }\n\n          while (left.length) {\n            sorted.push(left.shift());\n          }\n\n          while (right.length) {\n            sorted.push(right.shift());\n          } //recreate list, with sorted part\n\n\n          var x = list.slice(0, i);\n          var y = list.slice(maxIndex, list.length);\n          list = x.concat(sorted, y);\n          await this.timer(100);\n          this.setState({\n            array: list,\n            active1: list[i].key,\n            active2: list[maxIndex - 1].key\n          });\n          i = i + 2 * m;\n        }\n\n        m = m * 2;\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.swap = (items, leftIndex, rightIndex) => {\n      var temp = items[leftIndex];\n      items[leftIndex] = items[rightIndex];\n      items[rightIndex] = temp;\n    };\n\n    this.heapify = async list => {\n      for (var i = 1; i < list.length; i++) {\n        //if child is bigger than parent\n        if (list[i].value > list[parseInt((i - 1) / 2)].value) {\n          var j = i; //swap child and parent until parent is smaller\n\n          while (list[j].value > list[parseInt((j - 1) / 2)].value) {\n            //await this.timer(15);\n            var temp = list[j];\n            list[j] = list[parseInt((j - 1) / 2)];\n            list[parseInt((j - 1) / 2)] = temp;\n            this.setState({\n              array: list,\n              active1: i,\n              active2: j\n            });\n            j = parseInt((j - 1) / 2);\n            await this.timer(5);\n          }\n        }\n      }\n\n      return list;\n    };\n\n    this.heapsort = async list => {\n      //var res = this.heapify(list);\n      for (var i = 1; i < list.length; i++) {\n        //if child is bigger than parent\n        if (list[i].value > list[parseInt((i - 1) / 2)].value) {\n          var j = i; //while parent is smaller, swap child and parent\n\n          while (list[j].value > list[parseInt((j - 1) / 2)].value) {\n            var temp = list[j];\n            list[j] = list[parseInt((j - 1) / 2)];\n            list[parseInt((j - 1) / 2)] = temp;\n            this.setState({\n              array: list,\n              active1: i,\n              active2: j\n            });\n            j = parseInt((j - 1) / 2);\n            await this.timer(15);\n          }\n        }\n      }\n\n      var length = list.length;\n\n      for (var i = length - 1; i > 0; i--) {\n        //swap value of first index with last index\n        var temp = list[0];\n        list[0] = list[i];\n        list[i] = temp; //maintaining heap property, after each swap \n\n        var j = 0;\n        var index;\n\n        while (true) {\n          await this.timer(15);\n          index = 2 * j + 1; //if left child is smaller than right child, point index to right child\n\n          if (index < i - 1 && list[index].value < list[index + 1].value) {\n            index++;\n          } //if parent is smaller than child, swap them with child having higher value\n\n\n          if (index < i && list[j].value < list[index].value) {\n            temp = list[j];\n            list[j] = list[index];\n            list[index] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[i].key,\n            active2: list[j].key\n          });\n          j = index;\n\n          if (index >= i) {\n            break;\n          }\n        }\n      }\n\n      this.setState({\n        array: list,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.partition = (items, left, right) => {\n      var pivot = items[Math.floor((right + left) / 2)]; //middle element\n\n      var i = left; //left pointer\n\n      var j = right; //right pointer\n\n      while (i <= j) {\n        while (items[i].value < pivot.value) {\n          i++;\n        }\n\n        while (items[j].value > pivot.value) {\n          j--;\n        }\n\n        if (i <= j) {\n          this.swap(items, i, j); //swap two elements\n\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    };\n\n    this.quicksort = (items, left, right) => {\n      var index;\n\n      if (items.length > 1) {\n        index = this.partition(items, left, right); //index returned from partition\n\n        if (left < index - 1) {\n          //more elements on the left side of the pivot\n          this.quicksort(items, left, index - 1);\n        }\n\n        if (index < right) {\n          //more elements on the right side of the pivot\n          this.quicksort(items, index, right);\n        }\n      }\n\n      this.setState({\n        array: items\n      });\n      return items;\n    };\n\n    this.onStart = () => {\n      let algorithm = this.state.algorithm;\n\n      if (algorithm === 'bubblesort') {\n        this.bubblesort(this.state.array);\n      } else if (algorithm === 'selectionsort') {\n        this.selectionsort(this.state.array);\n      } else if (algorithm === 'insertionsort') {\n        this.insertionsort(this.state.array);\n      } else if (algorithm === 'mergesort') {\n        this.mergesort(this.state.array);\n      } else if (algorithm === 'heapsort') {\n        this.heapsort(this.state.array);\n      } else if (algorithm === 'quicksort') {\n        this.quicksort(this.state.array, 0, this.state.array.length - 1);\n      } //requestAnimationFrame(this.testAnimation);\n\n    };\n  }\n\n  componentDidMount() {\n    this.handleNewArray();\n  }\n\n  sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleNewArray: this.handleNewArray,\n      onStart: this.onStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/doubleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DoubleContainer, {\n      array: this.state.array,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/multipleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultipleContainer, {\n      array: this.state.array,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SingleContainer, {\n      array: this.state.array,\n      arraySize: this.state.array.length,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      algorithm: this.state.algorithm,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js"],"names":["React","SingleContainer","DoubleContainer","MultipleContainer","Header","HashRouter","Router","Switch","Route","App","Component","state","array","animationArray","auxArray","active1","active2","algorithm","active","sorted","testAnimation","setState","handleNewArray","arr","i","rand","Math","ceil","random","push","key","value","algorithmSelection","event","target","timer","ms","Promise","res","setTimeout","bubblesort","list","delay","length","j","temp","selectionsort","min","insertionsort","slice","delayLoop","fn","name","mergesort","n","m","right","left","maxIndex","shift","x","y","concat","swap","items","leftIndex","rightIndex","heapify","parseInt","heapsort","index","partition","pivot","floor","quicksort","onStart","componentDidMount","sleep","milliseconds","date","Date","now","currentDate","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CACA;;AAEA,SACEC,UAAU,IAAIC,MADhB,EAEEC,MAFF,EAGEC,KAHF,QAIO,kBAJP,C,CAMA;;AAEA,MAAMC,GAAN,SAAkBT,KAAK,CAACU,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,cAAc,EAAE,EAFV;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,OAAO,EAAE,GAJH;AAKNC,MAAAA,OAAO,EAAE,GALH;AAMNC,MAAAA,SAAS,EAAE,YANL;AAONC,MAAAA,MAAM,EAAE,IAPF;AAQNC,MAAAA,MAAM,EAAE;AARF,KADwB;;AAAA,SAahCC,aAbgC,GAahB,MAAM;AACpB,UAAI,KAAKT,KAAL,CAAWO,MAAf,EAAsB;AACpB,aAAKG,QAAL,CAAc;AACZJ,UAAAA,SAAS,EAAE,eADC;AAEZC,UAAAA,MAAM,EAAE,CAAC,KAAKP,KAAL,CAAWO;AAFR,SAAd;AAID,OALD,MAKK;AACH,aAAKG,QAAL,CAAc;AACZJ,UAAAA,SAAS,EAAE,eADC;AAEZC,UAAAA,MAAM,EAAE,CAAC,KAAKP,KAAL,CAAWO;AAFR,SAAd;AAID,OAXmB,CAYpB;;AACD,KA1B+B;;AAAA,SA4BhCI,cA5BgC,GA4Bf,MAAM;AACrB,YAAMC,GAAG,GAAG,EAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAC,GAAlB,EAAuBA,CAAC,EAAxB,EAA2B;AACzB,YAAIC,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,MAAL,KAAgB,GAA1B,CAAX;AACAL,QAAAA,GAAG,CAACM,IAAJ,CAAS;AAACC,UAAAA,GAAG,EAAEN,CAAN;AAASO,UAAAA,KAAK,EAAEN;AAAhB,SAAT;AACD;;AACD,WAAKJ,QAAL,CAAc;AACZT,QAAAA,KAAK,EAAEW;AADK,OAAd;AAGD,KArC+B;;AAAA,SA2ChCS,kBA3CgC,GA2CVC,KAAD,IAAW;AAC5B,WAAKZ,QAAL,CAAc;AACZJ,QAAAA,SAAS,EAAEgB,KAAK,CAACC,MAAN,CAAaH;AADZ,OAAd;AAGD,KA/C6B;;AAAA,SAiDhCI,KAjDgC,GAiDvBC,EAAD,IAAQ;AACd,aAAO,IAAIC,OAAJ,CAAYC,GAAG,IAAIC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA7B,CAAP;AACD,KAnD+B;;AAAA,SAsDhCI,UAtDgC,GAsDnB,OAAOC,IAAP,EAAaC,KAAb,KAAuB;AAClC,YAAMC,MAAM,GAAGF,IAAI,CAACE,MAApB;;AACA,WAAI,IAAInB,CAAC,GAAGmB,MAAM,GAAG,CAArB,EAAwBnB,CAAC,IAAE,CAA3B,EAA8BA,CAAC,EAA/B,EAAkC;AAChC,aAAI,IAAIoB,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAEpB,CAAlB,EAAqBoB,CAAC,EAAtB,EAAyB;AAEvB,cAAGH,IAAI,CAACG,CAAC,GAAC,CAAH,CAAJ,CAAUb,KAAV,GAAkBU,IAAI,CAACG,CAAD,CAAJ,CAAQb,KAA7B,EAAmC;AACjC,gBAAIc,IAAI,GAAGJ,IAAI,CAACG,CAAC,GAAC,CAAH,CAAf;AACAH,YAAAA,IAAI,CAACG,CAAC,GAAC,CAAH,CAAJ,GAAYH,IAAI,CAACG,CAAD,CAAhB;AACAH,YAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUC,IAAV;AACD;;AACD,eAAKxB,QAAL,CAAc;AACZT,YAAAA,KAAK,EAAE6B,IADK;AAEZ1B,YAAAA,OAAO,EAAE0B,IAAI,CAACG,CAAC,GAAC,CAAH,CAAJ,CAAUd,GAFP;AAGZd,YAAAA,OAAO,EAAEyB,IAAI,CAACG,CAAD,CAAJ,CAAQd;AAHL,WAAd;AAKA,gBAAM,KAAKK,KAAL,CAAW,EAAX,CAAN;AACD;;AACD,aAAKd,QAAL,CAAc;AACZN,UAAAA,OAAO,EAAE,GADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID;;AACD,aAAOyB,IAAP;AACD,KA7E+B;;AAAA,SAiFhCK,aAjFgC,GAiFhB,MAAOL,IAAP,IAAgB;AAC9B,UAAIE,MAAM,GAAGF,IAAI,CAACE,MAAlB;;AAEA,WAAI,IAAInB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGmB,MAAnB,EAA2BnB,CAAC,EAA5B,EAAgC;AAE5B,YAAIuB,GAAG,GAAGvB,CAAV;;AACA,aAAI,IAAIoB,CAAC,GAAGpB,CAAC,GAAG,CAAhB,EAAmBoB,CAAC,GAAGD,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAChC;AACA,cAAGH,IAAI,CAACM,GAAD,CAAJ,CAAUhB,KAAV,GAAkBU,IAAI,CAACG,CAAD,CAAJ,CAAQb,KAA7B,EAAoC;AAChC;AACAgB,YAAAA,GAAG,GAAGH,CAAN;AACH;;AACD,eAAKvB,QAAL,CAAc;AACZT,YAAAA,KAAK,EAAE6B,IADK;AAEZ1B,YAAAA,OAAO,EAAE0B,IAAI,CAACG,CAAD,CAAJ,CAAQd,GAFL;AAGZd,YAAAA,OAAO,EAAEyB,IAAI,CAACM,GAAD,CAAJ,CAAUjB;AAHP,WAAd;AAKA,gBAAM,KAAKK,KAAL,CAAW,CAAX,CAAN;AACH,SAf2B,CAiB5B;;;AACA,YAAGY,GAAG,KAAKvB,CAAX,EAAc;AACV,cAAIqB,IAAI,GAAGJ,IAAI,CAACjB,CAAD,CAAf;AACAiB,UAAAA,IAAI,CAACjB,CAAD,CAAJ,GAAUiB,IAAI,CAACM,GAAD,CAAd;AACAN,UAAAA,IAAI,CAACM,GAAD,CAAJ,GAAYF,IAAZ;AACH;AACJ;;AACD,WAAKxB,QAAL,CAAc;AACZN,QAAAA,OAAO,EAAE,GADG;AAEZC,QAAAA,OAAO,EAAE;AAFG,OAAd;AAKA,aAAOyB,IAAP;AACD,KAlH+B;;AAAA,SAoHhCO,aApHgC,GAoHhB,MAAOP,IAAP,IAAgB;AAC9B,UAAI3B,QAAQ,GAAG2B,IAAI,CAACQ,KAAL,EAAf;AACA,UAAIN,MAAM,GAAG7B,QAAQ,CAAC6B,MAAtB;;AAEA,WAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,MAApB,EAA4BnB,CAAC,EAA7B,EAAiC;AAC7B,YAAIM,GAAG,GAAGW,IAAI,CAACjB,CAAD,CAAd;AACA,YAAIoB,CAAC,GAAGpB,CAAC,GAAG,CAAZ;;AACA,eAAOoB,CAAC,IAAI,CAAL,IAAU9B,QAAQ,CAAC8B,CAAD,CAAR,CAAYb,KAAZ,GAAoBD,GAAG,CAACC,KAAzC,EAAgD;AAC9C,eAAKV,QAAL,CAAc;AACZT,YAAAA,KAAK,EAAEE,QADK;AAEZC,YAAAA,OAAO,EAAED,QAAQ,CAAC8B,CAAD,CAAR,CAAYd,GAFT;AAGZd,YAAAA,OAAO,EAAEF,QAAQ,CAACU,CAAD,CAAR,CAAYM;AAHT,WAAd;AAKA,gBAAM,KAAKK,KAAL,CAAW,EAAX,CAAN;AACArB,UAAAA,QAAQ,CAAC8B,CAAC,GAAG,CAAL,CAAR,GAAkB9B,QAAQ,CAAC8B,CAAD,CAA1B;AACA9B,UAAAA,QAAQ,CAAC8B,CAAD,CAAR,GAAc;AAACd,YAAAA,GAAG,EAAE,GAAN;AAAWC,YAAAA,KAAK,EAAEjB,QAAQ,CAAC8B,CAAD,CAAR,CAAYb;AAA9B,WAAd;AACAa,UAAAA,CAAC;AACF;;AACD9B,QAAAA,QAAQ,CAAC8B,CAAC,GAAG,CAAL,CAAR,GAAkBd,GAAlB;AACH,OAnB6B,CAqB9B;;;AACA,WAAKT,QAAL,CAAc;AACZT,QAAAA,KAAK,EAAEE,QADK;AAEZC,QAAAA,OAAO,EAAE,GAFG;AAGZC,QAAAA,OAAO,EAAE;AAHG,OAAd;AAKD,KA/I+B;;AAAA,SAoJhCkC,SApJgC,GAoJpB,CAACC,EAAD,EAAKT,KAAL,KAAe;AACzB,aAAQU,IAAD,IAAU;AACfb,QAAAA,UAAU,CAAC,MAAM;AACfY,UAAAA,EAAE,CAACC,IAAD,CAAF;AACD,SAFS,EAEPV,KAAK,GAAG,IAFD,CAAV;AAGD,OAJD;AAKD,KA1J+B;;AAAA,SAuKhCW,SAvKgC,GAuKpB,MAAOZ,IAAP,IAAgB;AAC1B,UAAIa,CAAC,GAAGb,IAAI,CAACE,MAAb;AACA,UAAIY,CAAC,GAAG,CAAR;AACA,UAAIC,KAAJ;AACA,UAAIC,IAAJ;AACA,UAAItC,MAAJ;AACA,UAAIuC,QAAJ,CAN0B,CAO1B;;AAEA,aAAOH,CAAC,GAAGD,CAAX,EAAa;AACX,YAAI9B,CAAC,GAAG,CAAR;;AACA,eAAMA,CAAC,GAAE8B,CAAC,GAAGC,CAAb,EAAe;AACb;AACAE,UAAAA,IAAI,GAAGhB,IAAI,CAACQ,KAAL,CAAWzB,CAAX,EAAcA,CAAC,GAAC+B,CAAhB,CAAP;AACAG,UAAAA,QAAQ,GAAGhC,IAAI,CAACqB,GAAL,CAASvB,CAAC,GAAC,IAAE+B,CAAb,EAAgBD,CAAhB,CAAX;AACAE,UAAAA,KAAK,GAAGf,IAAI,CAACQ,KAAL,CAAWzB,CAAC,GAAC+B,CAAb,EAAgBG,QAAhB,CAAR;AACAvC,UAAAA,MAAM,GAAG,EAAT,CALa,CAMb;AAEA;;AACA,iBAAMsC,IAAI,CAACd,MAAL,IAAea,KAAK,CAACb,MAA3B,EAAkC;AAChC,gBAAGc,IAAI,CAAC,CAAD,CAAJ,CAAQ1B,KAAR,IAAiByB,KAAK,CAAC,CAAD,CAAL,CAASzB,KAA7B,EAAmC;AACjCZ,cAAAA,MAAM,CAACU,IAAP,CAAY4B,IAAI,CAACE,KAAL,EAAZ;AACD,aAFD,MAEK;AACHxC,cAAAA,MAAM,CAACU,IAAP,CAAY2B,KAAK,CAACG,KAAN,EAAZ;AACD;AACF;;AAED,iBAAMF,IAAI,CAACd,MAAX,EAAkB;AAChBxB,YAAAA,MAAM,CAACU,IAAP,CAAY4B,IAAI,CAACE,KAAL,EAAZ;AACD;;AAED,iBAAMH,KAAK,CAACb,MAAZ,EAAmB;AACjBxB,YAAAA,MAAM,CAACU,IAAP,CAAY2B,KAAK,CAACG,KAAN,EAAZ;AACD,WAvBY,CAyBb;;;AACA,cAAIC,CAAC,GAAGnB,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAczB,CAAd,CAAR;AACA,cAAIqC,CAAC,GAAGpB,IAAI,CAACQ,KAAL,CAAWS,QAAX,EAAqBjB,IAAI,CAACE,MAA1B,CAAR;AACAF,UAAAA,IAAI,GAAGmB,CAAC,CAACE,MAAF,CAAS3C,MAAT,EAAiB0C,CAAjB,CAAP;AAEA,gBAAM,KAAK1B,KAAL,CAAW,GAAX,CAAN;AACA,eAAKd,QAAL,CAAc;AACZT,YAAAA,KAAK,EAAE6B,IADK;AAEZ1B,YAAAA,OAAO,EAAE0B,IAAI,CAACjB,CAAD,CAAJ,CAAQM,GAFL;AAGZd,YAAAA,OAAO,EAAEyB,IAAI,CAACiB,QAAQ,GAAC,CAAV,CAAJ,CAAiB5B;AAHd,WAAd;AAMAN,UAAAA,CAAC,GAAGA,CAAC,GAAG,IAAE+B,CAAV;AACD;;AACDA,QAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;AAEA,aAAKlC,QAAL,CAAc;AACZN,UAAAA,OAAO,EAAE,GADG;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID;;AACD,aAAOyB,IAAP;AACD,KAjO+B;;AAAA,SAqOhCsB,IArOgC,GAqOzB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,UAAnB,KAAkC;AACvC,UAAIrB,IAAI,GAAGmB,KAAK,CAACC,SAAD,CAAhB;AACAD,MAAAA,KAAK,CAACC,SAAD,CAAL,GAAmBD,KAAK,CAACE,UAAD,CAAxB;AACAF,MAAAA,KAAK,CAACE,UAAD,CAAL,GAAoBrB,IAApB;AACD,KAzO+B;;AAAA,SA2OhCsB,OA3OgC,GA2OtB,MAAO1B,IAAP,IAAgB;AACxB,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,IAAI,CAACE,MAAzB,EAAiCnB,CAAC,EAAlC,EAAqC;AACnC;AACA,YAAGiB,IAAI,CAACjB,CAAD,CAAJ,CAAQO,KAAR,GAAgBU,IAAI,CAAC2B,QAAQ,CAAC,CAAC5C,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAJ,CAAwBO,KAA3C,EAAiD;AAC/C,cAAIa,CAAC,GAAGpB,CAAR,CAD+C,CAG/C;;AACA,iBAAMiB,IAAI,CAACG,CAAD,CAAJ,CAAQb,KAAR,GAAgBU,IAAI,CAAC2B,QAAQ,CAAC,CAACxB,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAJ,CAAwBb,KAA9C,EAAoD;AAClD;AACA,gBAAIc,IAAI,GAAGJ,IAAI,CAACG,CAAD,CAAf;AACAH,YAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAAC2B,QAAQ,CAAC,CAACxB,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAd;AACAH,YAAAA,IAAI,CAAC2B,QAAQ,CAAC,CAACxB,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAJ,GAA0BC,IAA1B;AAEA,iBAAKxB,QAAL,CAAc;AACZT,cAAAA,KAAK,EAAE6B,IADK;AAEZ1B,cAAAA,OAAO,EAAES,CAFG;AAGZR,cAAAA,OAAO,EAAE4B;AAHG,aAAd;AAKAA,YAAAA,CAAC,GAAGwB,QAAQ,CAAC,CAACxB,CAAC,GAAG,CAAL,IAAU,CAAX,CAAZ;AACA,kBAAM,KAAKT,KAAL,CAAW,CAAX,CAAN;AACD;AACF;AACF;;AACD,aAAOM,IAAP;AACD,KAnQ+B;;AAAA,SAqQhC4B,QArQgC,GAqQrB,MAAO5B,IAAP,IAAgB;AACzB;AAEA,WAAK,IAAIjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACiB,IAAI,CAACE,MAAvB,EAA+BnB,CAAC,EAAhC,EAAmC;AACjC;AACA,YAAGiB,IAAI,CAACjB,CAAD,CAAJ,CAAQO,KAAR,GAAgBU,IAAI,CAAC2B,QAAQ,CAAC,CAAC5C,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAJ,CAAwBO,KAA3C,EAAiD;AAC/C,cAAIa,CAAC,GAAGpB,CAAR,CAD+C,CAG/C;;AACA,iBAAMiB,IAAI,CAACG,CAAD,CAAJ,CAAQb,KAAR,GAAgBU,IAAI,CAAC2B,QAAQ,CAAC,CAACxB,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAJ,CAAwBb,KAA9C,EAAoD;AAClD,gBAAIc,IAAI,GAAGJ,IAAI,CAACG,CAAD,CAAf;AACAH,YAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAAC2B,QAAQ,CAAC,CAACxB,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAd;AACAH,YAAAA,IAAI,CAAC2B,QAAQ,CAAC,CAACxB,CAAC,GAAC,CAAH,IAAM,CAAP,CAAT,CAAJ,GAA0BC,IAA1B;AAEA,iBAAKxB,QAAL,CAAc;AACZT,cAAAA,KAAK,EAAE6B,IADK;AAEZ1B,cAAAA,OAAO,EAAES,CAFG;AAGZR,cAAAA,OAAO,EAAE4B;AAHG,aAAd;AAKAA,YAAAA,CAAC,GAAGwB,QAAQ,CAAC,CAACxB,CAAC,GAAG,CAAL,IAAU,CAAX,CAAZ;AACA,kBAAM,KAAKT,KAAL,CAAW,EAAX,CAAN;AACD;AACF;AACF;;AAED,UAAIQ,MAAM,GAAGF,IAAI,CAACE,MAAlB;;AAEA,WAAI,IAAInB,CAAC,GAAGmB,MAAM,GAAG,CAArB,EAAwBnB,CAAC,GAAC,CAA1B,EAA6BA,CAAC,EAA9B,EAAiC;AAC/B;AACA,YAAIqB,IAAI,GAAGJ,IAAI,CAAC,CAAD,CAAf;AACAA,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAACjB,CAAD,CAAd;AACAiB,QAAAA,IAAI,CAACjB,CAAD,CAAJ,GAAUqB,IAAV,CAJ+B,CAM/B;;AACA,YAAID,CAAC,GAAG,CAAR;AACA,YAAI0B,KAAJ;;AAEA,eAAM,IAAN,EAAW;AACT,gBAAM,KAAKnC,KAAL,CAAW,EAAX,CAAN;AAEAmC,UAAAA,KAAK,GAAG,IAAE1B,CAAF,GAAI,CAAZ,CAHS,CAKT;;AACA,cAAG0B,KAAK,GAAI9C,CAAC,GAAG,CAAb,IAAmBiB,IAAI,CAAC6B,KAAD,CAAJ,CAAYvC,KAAZ,GAAoBU,IAAI,CAAC6B,KAAK,GAAG,CAAT,CAAJ,CAAgBvC,KAA1D,EAAgE;AAC9DuC,YAAAA,KAAK;AACN,WARQ,CAUT;;;AACA,cAAGA,KAAK,GAAG9C,CAAR,IAAaiB,IAAI,CAACG,CAAD,CAAJ,CAAQb,KAAR,GAAgBU,IAAI,CAAC6B,KAAD,CAAJ,CAAYvC,KAA5C,EAAkD;AAChDc,YAAAA,IAAI,GAAGJ,IAAI,CAACG,CAAD,CAAX;AACAH,YAAAA,IAAI,CAACG,CAAD,CAAJ,GAAUH,IAAI,CAAC6B,KAAD,CAAd;AACA7B,YAAAA,IAAI,CAAC6B,KAAD,CAAJ,GAAczB,IAAd;AACD;;AACD,eAAKxB,QAAL,CAAc;AACZT,YAAAA,KAAK,EAAE6B,IADK;AAEZ1B,YAAAA,OAAO,EAAE0B,IAAI,CAACjB,CAAD,CAAJ,CAAQM,GAFL;AAGZd,YAAAA,OAAO,EAAEyB,IAAI,CAACG,CAAD,CAAJ,CAAQd;AAHL,WAAd;AAMAc,UAAAA,CAAC,GAAG0B,KAAJ;;AACA,cAAGA,KAAK,IAAI9C,CAAZ,EAAc;AACZ;AACD;AACF;AACF;;AACD,WAAKH,QAAL,CAAc;AACZT,QAAAA,KAAK,EAAE6B,IADK;AAEZ1B,QAAAA,OAAO,EAAE,GAFG;AAGZC,QAAAA,OAAO,EAAE;AAHG,OAAd;AAKD,KA3U+B;;AAAA,SAkVhCuD,SAlVgC,GAkVpB,CAACP,KAAD,EAAQP,IAAR,EAAcD,KAAd,KAAwB;AAClC,UAAIgB,KAAK,GAAGR,KAAK,CAACtC,IAAI,CAAC+C,KAAL,CAAW,CAACjB,KAAK,GAAGC,IAAT,IAAiB,CAA5B,CAAD,CAAjB,CADkC,CACiB;;AACnD,UAAIjC,CAAC,GAAGiC,IAAR,CAFkC,CAEpB;;AACd,UAAIb,CAAC,GAAGY,KAAR,CAHkC,CAGnB;;AACf,aAAOhC,CAAC,IAAIoB,CAAZ,EAAc;AACZ,eAAOoB,KAAK,CAACxC,CAAD,CAAL,CAASO,KAAT,GAAiByC,KAAK,CAACzC,KAA9B,EAAoC;AAClCP,UAAAA,CAAC;AACF;;AACD,eAAOwC,KAAK,CAACpB,CAAD,CAAL,CAASb,KAAT,GAAiByC,KAAK,CAACzC,KAA9B,EAAoC;AAClCa,UAAAA,CAAC;AACF;;AACD,YAAIpB,CAAC,IAAIoB,CAAT,EAAY;AACV,eAAKmB,IAAL,CAAUC,KAAV,EAAiBxC,CAAjB,EAAoBoB,CAApB,EADU,CACc;;AACxBpB,UAAAA,CAAC;AACDoB,UAAAA,CAAC;AACF;AACF;;AACD,aAAOpB,CAAP;AACD,KApW+B;;AAAA,SAsWhCkD,SAtWgC,GAsWpB,CAACV,KAAD,EAAQP,IAAR,EAAcD,KAAd,KAAwB;AAClC,UAAIc,KAAJ;;AACA,UAAIN,KAAK,CAACrB,MAAN,GAAe,CAAnB,EAAsB;AACpB2B,QAAAA,KAAK,GAAG,KAAKC,SAAL,CAAeP,KAAf,EAAsBP,IAAtB,EAA4BD,KAA5B,CAAR,CADoB,CACwB;;AAC5C,YAAIC,IAAI,GAAGa,KAAK,GAAG,CAAnB,EAAsB;AAAE;AACtB,eAAKI,SAAL,CAAeV,KAAf,EAAsBP,IAAtB,EAA4Ba,KAAK,GAAG,CAApC;AACD;;AACD,YAAIA,KAAK,GAAGd,KAAZ,EAAmB;AAAE;AACnB,eAAKkB,SAAL,CAAeV,KAAf,EAAsBM,KAAtB,EAA6Bd,KAA7B;AACD;AACF;;AACD,WAAKnC,QAAL,CAAc;AAACT,QAAAA,KAAK,EAAEoD;AAAR,OAAd;AACA,aAAOA,KAAP;AACD,KAnX+B;;AAAA,SAuXhCW,OAvXgC,GAuXtB,MAAM;AACd,UAAI1D,SAAS,GAAG,KAAKN,KAAL,CAAWM,SAA3B;;AACA,UAAGA,SAAS,KAAK,YAAjB,EAA8B;AAC5B,aAAKuB,UAAL,CAAgB,KAAK7B,KAAL,CAAWC,KAA3B;AACD,OAFD,MAEM,IAAIK,SAAS,KAAK,eAAlB,EAAmC;AACvC,aAAK6B,aAAL,CAAmB,KAAKnC,KAAL,CAAWC,KAA9B;AACD,OAFK,MAEA,IAAGK,SAAS,KAAK,eAAjB,EAAiC;AACrC,aAAK+B,aAAL,CAAmB,KAAKrC,KAAL,CAAWC,KAA9B;AACD,OAFK,MAEA,IAAGK,SAAS,KAAK,WAAjB,EAA6B;AACjC,aAAKoC,SAAL,CAAe,KAAK1C,KAAL,CAAWC,KAA1B;AACD,OAFK,MAEA,IAAGK,SAAS,KAAK,UAAjB,EAA4B;AAChC,aAAKoD,QAAL,CAAc,KAAK1D,KAAL,CAAWC,KAAzB;AACD,OAFK,MAEA,IAAGK,SAAS,KAAK,WAAjB,EAA6B;AACjC,aAAKyD,SAAL,CAAe,KAAK/D,KAAL,CAAWC,KAA1B,EAAiC,CAAjC,EAAoC,KAAKD,KAAL,CAAWC,KAAX,CAAiB+B,MAAjB,GAA0B,CAA9D;AACD,OAda,CAed;;AACD,KAvY+B;AAAA;;AAuChCiC,EAAAA,iBAAiB,GAAE;AACjB,SAAKtD,cAAL;AACD;;AAoHDuD,EAAAA,KAAK,CAACC,YAAD,EAAe;AAClB,UAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,EAAb;AACA,QAAIC,WAAW,GAAG,IAAlB;;AACA,OAAG;AACDA,MAAAA,WAAW,GAAGF,IAAI,CAACC,GAAL,EAAd;AACD,KAFD,QAESC,WAAW,GAAGH,IAAd,GAAqBD,YAF9B;AAGD;;AAwODK,EAAAA,MAAM,GAAE;AACN,wBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,cAAc,EAAE,KAAK7D,cAA7B;AAA6C,MAAA,OAAO,EAAE,KAAKqD,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,kBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE,KAAKhE,KAAL,CAAWC,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,oBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,iBAAD;AAAmB,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,eAOE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAnC;AACE,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,KAAX,CAAiB+B,MAD9B;AAEE,MAAA,OAAO,EAAE,KAAKhC,KAAL,CAAWI,OAFtB;AAGE,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,OAHtB;AAIE,MAAA,SAAS,EAAE,KAAKL,KAAL,CAAWM,SAJxB;AAKE,MAAA,kBAAkB,EAAE,KAAKe,kBAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,CAFF,CADF,CADF;AAwBH;;AApaiC;;AAwalC,eAAevB,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header';\n//import bubblesort from './algorithms/bubblesort';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n//const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  state = {\n    array: [], \n    animationArray: [],\n    auxArray: [],\n    active1: 101,\n    active2: 101,\n    algorithm: 'bubblesort',\n    active: true,\n    sorted: false,\n    \n  }\n\n  testAnimation = () => {\n    if (this.state.active){\n      this.setState({\n        algorithm: 'insertionsort',\n        active: !this.state.active\n      })\n    }else{\n      this.setState({\n        algorithm: 'selectionsort',\n        active: !this.state.active\n      })\n    }\n    //requestAnimationFrame(this.testAnimation)\n  }\n\n  handleNewArray = () => {\n    const arr = [];\n    for (var i = 0; i<100; i++){\n      var rand = Math.ceil(Math.random() * 100);\n      arr.push({key: i, value: rand});\n    }\n    this.setState({\n      array: arr\n    })\n  }\n\n  componentDidMount(){\n    this.handleNewArray();\n  }\n\n  algorithmSelection = (event) => {\n      this.setState({\n        algorithm: event.target.value\n      })\n    }\n\n  timer = (ms) => {\n    return new Promise(res => setTimeout(res, ms));\n  }\n\n  //bubble sort\n  bubblesort = async (list, delay) => {\n    const length = list.length;\n    for(var i = length - 1; i>=0; i--){\n      for(var j = 1; j<=i; j++){\n        \n        if(list[j-1].value > list[j].value){\n          let temp = list[j-1];\n          list[j-1] = list[j];\n          list[j] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[j-1].key,\n          active2: list[j].key\n        })\n        await this.timer(15);\n      }\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n  \n\n  selectionsort = async (list) => {\n    let length = list.length;\n  \n    for(var i = 0; i < length; i++) {\n        \n        var min = i;\n        for(var j = i + 1; j < length; j++) {\n            // Executing statement comparison\n            if(list[min].value > list[j].value) {\n                // Updating our current min index to iterate\n                min = j;\n            }\n            this.setState({\n              array: list,\n              active1: list[j].key,\n              active2: list[min].key\n            })\n            await this.timer(5)\n        }\n        \n        // Swaping values\n        if(min !== i) {\n            let temp = list[i];\n            list[i] = list[min];\n            list[min] = temp;\n        }\n    }\n    this.setState({\n      active1: 100,\n      active2: 100\n    })\n  \n    return list;\n  }\n\n  insertionsort = async (list) => {\n    let auxArray = list.slice();\n    let length = auxArray.length;\n    \n    for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          })\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {key: 100, value: auxArray[j].value};\n          j--;\n        }\n        auxArray[j + 1] = key;\n    }\n    \n    //get rid of active \"red\" bars\n    this.setState({\n      array: auxArray,\n      active1: 101,\n      active2: 101\n    })\n  }\n\n  //------------------------------ to implement --------------------------//\n\n\n  delayLoop = (fn, delay) => {\n    return (name) => {\n      setTimeout(() => {\n        fn(name);\n      }, delay * 1000);\n    }\n  }\n\n\n  sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n\n\n  mergesort = async (list) => {\n    var n = list.length;\n    var m = 1;\n    var right;\n    var left;\n    var sorted; \n    var maxIndex;\n    //var auxArray; \n\n    while (m < n){\n      var i = 0;\n      while(i< n - m){\n        //slice\n        left = list.slice(i, i+m);\n        maxIndex = Math.min(i+2*m, n);\n        right = list.slice(i+m, maxIndex);\n        sorted = [];\n        //auxArray = [];\n\n        //merge\n        while(left.length && right.length){\n          if(left[0].value <= right[0].value){\n            sorted.push(left.shift());\n          }else{\n            sorted.push(right.shift());\n          }\n        }\n\n        while(left.length){\n          sorted.push(left.shift());\n        }\n\n        while(right.length){\n          sorted.push(right.shift());\n        }\n\n        //recreate list, with sorted part\n        var x = list.slice(0, i);\n        var y = list.slice(maxIndex, list.length);\n        list = x.concat(sorted, y);\n        \n        await this.timer(100);\n        this.setState({\n          array: list,\n          active1: list[i].key,\n          active2: list[maxIndex-1].key\n        });\n\n        i = i + 2*m\n      }\n      m = m * 2;\n\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n \n\n  swap = (items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n  }\n\n  heapify = async (list) => {\n    for (var i = 1; i < list.length; i++){\n      //if child is bigger than parent\n      if(list[i].value > list[parseInt((i-1)/2)].value){\n        var j = i;\n\n        //swap child and parent until parent is smaller\n        while(list[j].value > list[parseInt((j-1)/2)].value){\n          //await this.timer(15);\n          var temp = list[j];\n          list[j] = list[parseInt((j-1)/2)];\n          list[parseInt((j-1)/2)] = temp;\n\n          this.setState({\n            array: list,\n            active1: i,\n            active2: j\n          });\n          j = parseInt((j - 1) / 2);\n          await this.timer(5);\n        }\n      }\n    }\n    return list;\n  }\n\n  heapsort = async (list) => {\n    //var res = this.heapify(list);\n\n    for (var i = 1; i<list.length; i++){\n      //if child is bigger than parent\n      if(list[i].value > list[parseInt((i-1)/2)].value){\n        var j = i;\n\n        //while parent is smaller, swap child and parent\n        while(list[j].value > list[parseInt((j-1)/2)].value){\n          var temp = list[j];\n          list[j] = list[parseInt((j-1)/2)];\n          list[parseInt((j-1)/2)] = temp;\n\n          this.setState({\n            array: list,\n            active1: i,\n            active2: j\n          });\n          j = parseInt((j - 1) / 2);\n          await this.timer(15)\n        }\n      }\n    }\n   \n    var length = list.length;\n\n    for(var i = length - 1; i>0; i--){\n      //swap value of first index with last index\n      var temp = list[0];\n      list[0] = list[i];\n      list[i] = temp;\n\n      //maintaining heap property, after each swap \n      var j = 0;\n      var index;\n\n      while(true){\n        await this.timer(15);\n        \n        index = 2*j+1;\n\n        //if left child is smaller than right child, point index to right child\n        if(index < (i - 1) && list[index].value < list[index + 1].value){\n          index++;\n        }\n\n        //if parent is smaller than child, swap them with child having higher value\n        if(index < i && list[j].value < list[index].value){\n          temp = list[j];\n          list[j] = list[index];\n          list[index] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[i].key,\n          active2: list[j].key\n        });\n\n        j = index;\n        if(index >= i){\n          break;\n        }\n      }\n    }\n    this.setState({\n      array: list,\n      active1: 101,\n      active2: 101\n    });\n  }\n\n\n\n\n\n  //quicksort\n  partition = (items, left, right) => {\n    var pivot = items[Math.floor((right + left) / 2)]; //middle element\n    var i = left; //left pointer\n    var j = right; //right pointer\n    while (i <= j){\n      while (items[i].value < pivot.value){\n        i++;\n      }\n      while (items[j].value > pivot.value){\n        j--;\n      }\n      if (i <= j) {\n        this.swap(items, i, j); //swap two elements\n        i++;\n        j--;\n      }\n    }\n    return i;\n  }\n\n  quicksort = (items, left, right) => {\n    var index;\n    if (items.length > 1) {\n      index = this.partition(items, left, right); //index returned from partition\n      if (left < index - 1) { //more elements on the left side of the pivot\n        this.quicksort(items, left, index - 1);\n      }\n      if (index < right) { //more elements on the right side of the pivot\n        this.quicksort(items, index, right);\n      }\n    }\n    this.setState({array: items});\n    return items;\n  }\n\n\n\n  onStart = () => {\n    let algorithm = this.state.algorithm;\n    if(algorithm === 'bubblesort'){\n      this.bubblesort(this.state.array)\n    }else if (algorithm === 'selectionsort') {\n      this.selectionsort(this.state.array);\n    }else if(algorithm === 'insertionsort'){\n      this.insertionsort(this.state.array)\n    }else if(algorithm === 'mergesort'){\n      this.mergesort(this.state.array);\n    }else if(algorithm === 'heapsort'){\n      this.heapsort(this.state.array);\n    }else if(algorithm === 'quicksort'){\n      this.quicksort(this.state.array, 0, this.state.array.length - 1);\n    }\n    //requestAnimationFrame(this.testAnimation);\n  };\n\n\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header handleNewArray={this.handleNewArray} onStart={this.onStart}/>\n          <Switch>\n            <Route path='/doubleContainer'> \n              <DoubleContainer array={this.state.array} />\n            </Route>\n            <Route path='/multipleContainer'> \n              <MultipleContainer array={this.state.array} />\n            </Route>\n            <Route path='/'> \n              <SingleContainer array={this.state.array} \n                arraySize={this.state.array.length} \n                active1={this.state.active1}\n                active2={this.state.active2}\n                algorithm={this.state.algorithm}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n          </Switch>\n        </div>\n    </Router>\n  );\n}\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}