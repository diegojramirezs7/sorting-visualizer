{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header'; //import bubblesort from './algorithms/bubblesort';\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nconst requestAnimationFrame = window.requestAnimationFrame;\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      active1: 101,\n      active2: 101,\n      algorithm: 'bubblesort',\n      active: true\n    };\n\n    this.testAnimation = () => {\n      if (this.state.active) {\n        this.setState({\n          algorithm: 'insertionsort',\n          active: !this.state.active\n        });\n      } else {\n        this.setState({\n          algorithm: 'selectionsort',\n          active: !this.state.active\n        });\n      } //requestAnimationFrame(this.testAnimation)\n\n    };\n\n    this.handleNewArray = () => {\n      const arr = [];\n\n      for (var i = 0; i < 100; i++) {\n        var rand = Math.ceil(Math.random() * 100);\n        arr.push({\n          key: i,\n          value: rand\n        });\n      }\n\n      this.setState({\n        array: arr\n      });\n    };\n\n    this.algorithmSelection = event => {\n      this.setState({\n        algorithm: event.target.value\n      });\n    };\n\n    this.timer = ms => {\n      return new Promise(res => setTimeout(res, ms));\n    };\n\n    this.bubblesort = async (list, delay) => {\n      const length = list.length;\n\n      for (var i = length - 1; i >= 0; i--) {\n        for (var j = 1; j <= i; j++) {\n          if (list[j - 1].value > list[j].value) {\n            let temp = list[j - 1];\n            list[j - 1] = list[j];\n            list[j] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j - 1].key,\n            active2: list[j].key\n          });\n          await this.timer(15);\n        }\n\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.selectionsort = async list => {\n      let length = list.length;\n\n      for (var i = 0; i < length; i++) {\n        var min = i;\n\n        for (var j = i + 1; j < length; j++) {\n          // Executing statement comparison\n          if (list[min].value > list[j].value) {\n            // Updating our current min index to iterate\n            min = j;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j].key,\n            active2: list[min].key\n          });\n          await this.timer(15);\n        } // Swaping values\n\n\n        if (min !== i) {\n          let temp = list[i];\n          list[i] = list[min];\n          list[min] = temp;\n        }\n      }\n\n      this.setState({\n        active1: 100,\n        active2: 100\n      });\n      return list;\n    };\n\n    this.insertionsort = async list => {\n      let auxArray = list.slice();\n      let length = auxArray.length;\n\n      for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          });\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {\n            key: 100,\n            value: auxArray[j].value\n          };\n          j--;\n        }\n\n        auxArray[j + 1] = key;\n      } //get rid of active \"red\" bars\n\n\n      this.setState({\n        array: auxArray,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.delayLoop = (fn, delay) => {\n      return name => {\n        setTimeout(() => {\n          fn(name);\n        }, delay * 1000);\n      };\n    };\n\n    this.merge = (left, right) => {\n      var list = [];\n      var res;\n\n      while (left.length && right.length) {\n        if (left[0].value < right[0].value) {\n          list.push(left.shift());\n        } else {\n          list.push(right.shift());\n        }\n      }\n\n      res = [...list, ...left, ...right];\n      this.setState({\n        array: res\n      });\n      return res;\n    };\n\n    this.mergesort = list => {\n      let half = list.length / 2;\n\n      if (list.length < 2) {\n        return list;\n      }\n\n      const left = list.splice(0, half);\n      const right = list.splice(half, list.length);\n      let res = this.merge(this.mergesort(left), this.mergesort(right));\n      return res;\n    };\n\n    this.swap = (items, leftIndex, rightIndex) => {\n      var temp = items[leftIndex];\n      items[leftIndex] = items[rightIndex];\n      items[rightIndex] = temp;\n    };\n\n    this.heapify = (input, i, length) => {\n      var left = 2 * i + 1;\n      var right = 2 * i + 2;\n      var max = i; //var length = input.length;\n\n      if (left < length && input[left].value > input[max].value) {\n        max = left;\n      }\n\n      if (right < length && input[right].value > input[max].value) {\n        max = right;\n      }\n\n      if (max !== i) {\n        this.swap(input, i, max);\n        this.heapify(input, max, length);\n      }\n    };\n\n    this.heapsort = input => {\n      var length = input.length;\n\n      for (var i = Math.floor(length / 2); i >= 0; i--) {\n        this.heapify(input, i, length);\n      }\n\n      for (i = input.length - 1; i > 0; i--) {\n        this.swap(input, 0, i);\n        length--;\n        this.heapify(input, 0, length);\n      }\n\n      this.setState({\n        array: input\n      });\n    };\n\n    this.partition = (items, left, right) => {\n      var pivot = items[Math.floor((right + left) / 2)]; //middle element\n\n      var i = left; //left pointer\n\n      var j = right; //right pointer\n\n      while (i <= j) {\n        while (items[i].value < pivot.value) {\n          i++;\n        }\n\n        while (items[j].value > pivot.value) {\n          j--;\n        }\n\n        if (i <= j) {\n          this.swap(items, i, j); //swap two elements\n\n          i++;\n          j--;\n        }\n      }\n\n      return i;\n    };\n\n    this.quicksort = (items, left, right) => {\n      var index;\n\n      if (items.length > 1) {\n        index = this.partition(items, left, right); //index returned from partition\n\n        if (left < index - 1) {\n          //more elements on the left side of the pivot\n          this.quicksort(items, left, index - 1);\n        }\n\n        if (index < right) {\n          //more elements on the right side of the pivot\n          this.quicksort(items, index, right);\n        }\n      }\n\n      this.setState({\n        array: items\n      });\n      return items;\n    };\n\n    this.onStart = () => {\n      let algorithm = this.state.algorithm;\n\n      if (algorithm === 'bubblesort') {\n        this.bubblesort(this.state.array);\n      } else if (algorithm === 'selectionsort') {\n        this.selectionsort(this.state.array);\n      } else if (algorithm === 'insertionsort') {\n        this.insertionsort(this.state.array);\n      } else if (algorithm === 'mergesort') {\n        this.mergesort(this.state.array);\n      } else if (algorithm === 'heapsort') {\n        this.heapsort(this.state.array);\n      } else if (algorithm === 'quicksort') {\n        this.quicksort(this.state.array, 0, this.state.array.length - 1);\n      } //requestAnimationFrame(this.testAnimation);\n\n    };\n  }\n\n  componentDidMount() {\n    this.handleNewArray();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleNewArray: this.handleNewArray,\n      onStart: this.onStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/doubleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DoubleContainer, {\n      array: this.state.array,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/multipleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultipleContainer, {\n      array: this.state.array,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SingleContainer, {\n      array: this.state.array,\n      arraySize: this.state.array.length,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      algorithm: this.state.algorithm,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js"],"names":["React","SingleContainer","DoubleContainer","MultipleContainer","Header","HashRouter","Router","Switch","Route","requestAnimationFrame","window","App","Component","state","array","active1","active2","algorithm","active","testAnimation","setState","handleNewArray","arr","i","rand","Math","ceil","random","push","key","value","algorithmSelection","event","target","timer","ms","Promise","res","setTimeout","bubblesort","list","delay","length","j","temp","selectionsort","min","insertionsort","auxArray","slice","delayLoop","fn","name","merge","left","right","shift","mergesort","half","splice","swap","items","leftIndex","rightIndex","heapify","input","max","heapsort","floor","partition","pivot","quicksort","index","onStart","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header';\n//import bubblesort from './algorithms/bubblesort';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  state = {\n    array: [], \n    active1: 101,\n    active2: 101,\n    algorithm: 'bubblesort',\n    active: true\n  }\n\n  testAnimation = () => {\n    if (this.state.active){\n      this.setState({\n        algorithm: 'insertionsort',\n        active: !this.state.active\n      })\n    }else{\n      this.setState({\n        algorithm: 'selectionsort',\n        active: !this.state.active\n      })\n    }\n    //requestAnimationFrame(this.testAnimation)\n  }\n\n  handleNewArray = () => {\n    const arr = [];\n    for (var i = 0; i<100; i++){\n      var rand = Math.ceil(Math.random() * 100);\n      arr.push({key: i, value: rand});\n    }\n    this.setState({\n      array: arr\n    })\n  }\n\n  componentDidMount(){\n    this.handleNewArray();\n  }\n\n  algorithmSelection = (event) => {\n      this.setState({\n        algorithm: event.target.value\n      })\n    }\n\n  timer = (ms) => {\n    return new Promise(res => setTimeout(res, ms));\n  }\n\n  //bubble sort\n  bubblesort = async (list, delay) => {\n    const length = list.length;\n    for(var i = length - 1; i>=0; i--){\n      for(var j = 1; j<=i; j++){\n        \n        if(list[j-1].value > list[j].value){\n          let temp = list[j-1];\n          list[j-1] = list[j];\n          list[j] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[j-1].key,\n          active2: list[j].key\n        })\n        await this.timer(15);\n      }\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n  \n\n  selectionsort = async (list) => {\n    let length = list.length;\n  \n    for(var i = 0; i < length; i++) {\n        \n        var min = i;\n        for(var j = i + 1; j < length; j++) {\n            // Executing statement comparison\n            if(list[min].value > list[j].value) {\n                // Updating our current min index to iterate\n                min = j;\n            }\n            this.setState({\n              array: list,\n              active1: list[j].key,\n              active2: list[min].key\n            })\n            await this.timer(15)\n        }\n        \n        // Swaping values\n        if(min !== i) {\n            let temp = list[i];\n            list[i] = list[min];\n            list[min] = temp;\n        }\n    }\n    this.setState({\n      active1: 100,\n      active2: 100\n    })\n  \n    return list;\n  }\n\n  insertionsort = async (list) => {\n    let auxArray = list.slice();\n    let length = auxArray.length;\n    \n    for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          })\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {key: 100, value: auxArray[j].value};\n          j--;\n        }\n        auxArray[j + 1] = key;\n    }\n    \n    //get rid of active \"red\" bars\n    this.setState({\n      array: auxArray,\n      active1: 101,\n      active2: 101\n    })\n  }\n\n  //------------------------------ to implement --------------------------//\n\n\n  delayLoop = (fn, delay) => {\n    return (name) => {\n      setTimeout(() => {\n        fn(name);\n      }, delay * 1000);\n    }\n  }\n\n\n  //merge sort\n  merge = (left, right) => {\n    var list = [];\n    var res;\n    while(left.length && right.length){\n      \n        if(left[0].value < right[0].value){\n          list.push(left.shift());\n        }else{\n          list.push(right.shift());\n        } \n    }\n    res = [...list, ...left, ...right];\n    this.setState({array: res})\n    return res\n  }\n\n  mergesort = (list) => {\n    let half = list.length/2;\n    if(list.length < 2){\n      return list;\n    }\n\n    const left = list.splice(0,half);\n    const right = list.splice(half, list.length);\n    let res = this.merge(this.mergesort(left), this.mergesort(right))\n    return res\n  }\n\n\n\n\n  swap = (items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n  }\n\n  heapify = (input, i, length) => {\n    var left = 2 * i + 1;\n    var right = 2 * i + 2;\n    var max = i;\n    //var length = input.length;\n\n    if (left < length && input[left].value > input[max].value) {\n      max = left;\n    }\n    if (right < length && input[right].value > input[max].value)     {\n      max = right;\n    }\n    if (max !== i) {\n      this.swap(input, i, max);\n      this.heapify(input, max, length);\n    }\n  }\n\n  heapsort = (input) => {\n    var length = input.length;\n    for (var i = Math.floor(length / 2); i >= 0; i--){\n      this.heapify(input, i, length);\n    }\n\n    for (i = input.length - 1; i > 0; i--) {\n      this.swap(input, 0, i);\n      length--;\n      this.heapify(input, 0, length);\n    }\n\n    this.setState({array: input})\n  }\n\n\n  //quicksort\n  \n  partition = (items, left, right) => {\n    var pivot = items[Math.floor((right + left) / 2)]; //middle element\n    var i = left; //left pointer\n    var j = right; //right pointer\n    while (i <= j){\n      while (items[i].value < pivot.value){\n        i++;\n      }\n      while (items[j].value > pivot.value){\n        j--;\n      }\n      if (i <= j) {\n        this.swap(items, i, j); //swap two elements\n        i++;\n        j--;\n      }\n    }\n    return i;\n  }\n\n  quicksort = (items, left, right) => {\n    var index;\n    if (items.length > 1) {\n      index = this.partition(items, left, right); //index returned from partition\n      if (left < index - 1) { //more elements on the left side of the pivot\n        this.quicksort(items, left, index - 1);\n      }\n      if (index < right) { //more elements on the right side of the pivot\n        this.quicksort(items, index, right);\n      }\n    }\n    this.setState({array: items});\n    return items;\n  }\n\n\n\n  onStart = () => {\n    let algorithm = this.state.algorithm;\n    if(algorithm === 'bubblesort'){\n      this.bubblesort(this.state.array)\n    }else if (algorithm === 'selectionsort') {\n      this.selectionsort(this.state.array);\n    }else if(algorithm === 'insertionsort'){\n      this.insertionsort(this.state.array)\n    }else if(algorithm === 'mergesort'){\n      this.mergesort(this.state.array);\n    }else if(algorithm === 'heapsort'){\n      this.heapsort(this.state.array);\n    }else if(algorithm === 'quicksort'){\n      this.quicksort(this.state.array, 0, this.state.array.length - 1);\n    }\n    //requestAnimationFrame(this.testAnimation);\n  };\n\n\n\n\n\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header handleNewArray={this.handleNewArray} onStart={this.onStart}/>\n          <Switch>\n            <Route path='/doubleContainer'> \n              <DoubleContainer array={this.state.array} />\n            </Route>\n            <Route path='/multipleContainer'> \n              <MultipleContainer array={this.state.array} />\n            </Route>\n            <Route path='/'> \n              <SingleContainer array={this.state.array} \n                arraySize={this.state.array.length} \n                active1={this.state.active1}\n                active2={this.state.active2}\n                algorithm={this.state.algorithm}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n          </Switch>\n        </div>\n    </Router>\n  );\n}\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}