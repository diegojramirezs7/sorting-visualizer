{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header'; //import bubblesort from './algorithms/bubblesort';\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"; //const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      animationArray: [],\n      auxArray: [],\n      active1: 101,\n      active2: 101,\n      algorithm: 'bubblesort'\n    };\n\n    this.handleNewArray = () => {\n      const arr = [];\n\n      for (var i = 0; i < 100; i++) {\n        var rand = Math.ceil(Math.random() * 100);\n        arr.push({\n          key: i,\n          value: rand\n        });\n      }\n\n      this.setState({\n        array: arr\n      });\n    };\n\n    this.algorithmSelection = event => {\n      this.setState({\n        algorithm: event.target.value\n      });\n    };\n\n    this.timer = ms => {\n      return new Promise(res => setTimeout(res, ms));\n    };\n\n    this.bubblesort = async (list, delay) => {\n      const length = list.length;\n\n      for (var i = length - 1; i >= 0; i--) {\n        for (var j = 1; j <= i; j++) {\n          if (list[j - 1].value > list[j].value) {\n            let temp = list[j - 1];\n            list[j - 1] = list[j];\n            list[j] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j - 1].key,\n            active2: list[j].key\n          });\n          await this.timer(15);\n        }\n\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.selectionsort = async list => {\n      let length = list.length;\n\n      for (var i = 0; i < length; i++) {\n        var min = i;\n\n        for (var j = i + 1; j < length; j++) {\n          // Executing statement comparison\n          if (list[min].value > list[j].value) {\n            // Updating our current min index to iterate\n            min = j;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j].key,\n            active2: list[min].key\n          });\n          await this.timer(15);\n        } // Swaping values\n\n\n        if (min !== i) {\n          let temp = list[i];\n          list[i] = list[min];\n          list[min] = temp;\n        }\n      }\n\n      this.setState({\n        active1: 100,\n        active2: 100\n      });\n      return list;\n    };\n\n    this.insertionsort = async list => {\n      let auxArray = list.slice();\n      let length = auxArray.length;\n\n      for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          });\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {\n            key: 100,\n            value: auxArray[j].value\n          };\n          j--;\n        }\n\n        auxArray[j + 1] = key;\n      } //get rid of active \"red\" bars\n\n\n      this.setState({\n        array: auxArray,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.delayLoop = (fn, delay) => {\n      return name => {\n        setTimeout(() => {\n          fn(name);\n        }, delay * 1000);\n      };\n    };\n\n    this.mergesort = async list => {\n      var n = list.length;\n      var m = 1;\n      var right;\n      var left;\n      var sorted;\n      var maxIndex; //var auxArray; \n\n      while (m < n) {\n        var i = 0;\n\n        while (i < n - m) {\n          //slice\n          left = list.slice(i, i + m);\n          maxIndex = Math.min(i + 2 * m, n);\n          right = list.slice(i + m, maxIndex);\n          sorted = []; //auxArray = [];\n          //merge\n\n          while (left.length && right.length) {\n            await this.timer(15);\n\n            if (left[0].value <= right[0].value) {\n              sorted.push(left.shift());\n            } else {\n              sorted.push(right.shift());\n            }\n          }\n\n          while (left.length) {\n            sorted.push(left.shift());\n          }\n\n          while (right.length) {\n            sorted.push(right.shift());\n          } //recreate list, with sorted part\n\n\n          var x = list.slice(0, i);\n          var y = list.slice(maxIndex, list.length);\n          list = x.concat(sorted, y);\n          await this.timer(15);\n          this.setState({\n            array: list,\n            active1: list[i].key,\n            active2: list[maxIndex - 1].key\n          });\n          i = i + 2 * m;\n        }\n\n        m = m * 2;\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.swap = (items, leftIndex, rightIndex) => {\n      var temp = items[leftIndex];\n      items[leftIndex] = items[rightIndex];\n      items[rightIndex] = temp;\n    };\n\n    this.heapsort = async list => {\n      //var res = this.heapify(list);\n      for (var i = 1; i < list.length; i++) {\n        //if child is bigger than parent\n        if (list[i].value > list[parseInt((i - 1) / 2)].value) {\n          var j = i; //while parent is smaller, swap child and parent\n\n          while (list[j].value > list[parseInt((j - 1) / 2)].value) {\n            var temp = list[j];\n            list[j] = list[parseInt((j - 1) / 2)];\n            list[parseInt((j - 1) / 2)] = temp;\n            this.setState({\n              array: list,\n              active1: i,\n              active2: j\n            });\n            j = parseInt((j - 1) / 2);\n            await this.timer(15);\n          }\n        }\n      }\n\n      var length = list.length;\n\n      for (var i = length - 1; i > 0; i--) {\n        //swap value of first index with last index\n        var temp = list[0];\n        list[0] = list[i];\n        list[i] = temp; //maintaining heap property, after each swap \n\n        var j = 0;\n        var index;\n\n        while (true) {\n          await this.timer(15);\n          index = 2 * j + 1; //if left child is smaller than right child, point index to right child\n\n          if (index < i - 1 && list[index].value < list[index + 1].value) {\n            index++;\n          } //if parent is smaller than child, swap them with child having higher value\n\n\n          if (index < i && list[j].value < list[index].value) {\n            temp = list[j];\n            list[j] = list[index];\n            list[index] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[i].key,\n            active2: list[j].key\n          });\n          j = index;\n\n          if (index >= i) {\n            break;\n          }\n        }\n      }\n\n      this.setState({\n        array: list,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.quicksort = async (list, low, high) => {\n      var size = high - low + 1; //create auxiliary stack\n\n      var stack = new Array(size); //initialize top of the stack\n\n      var top = -1; //push initial values of high and low to the stack\n\n      stack[++top] = low;\n      stack[++top] = high;\n\n      while (top >= 0) {\n        high = stack[top--];\n        low = stack[top--]; //set pivot element in its correct position, in sorted array\n        //var pivot = this.partition(list, low, high);\n        // partition method\n\n        var p = list[high];\n        var i = low - 1;\n\n        for (var j = low; j <= high - 1; j++) {\n          if (list[j].value <= p.value) {\n            i++;\n            await this.timer(20);\n            this.swap(list, i, j); // var temp = list[i];\n            // list[i] = list[j];\n            // list[j] = temp;\n\n            this.setState({\n              array: list,\n              active1: p.key,\n              active2: j\n            });\n          }\n        }\n\n        this.swap(list, i + 1, high); // temp = list[i+1];\n        // list[i+1] = list[high];\n        // list[high] = temp;\n\n        var pivot = i + 1; //end of partition \n\n        await this.timer(20);\n        this.setState({\n          array: list,\n          active1: high,\n          active2: low\n        }); //if there are elements on left side of pivot, push left side to stack\n\n        if (pivot - 1 > low) {\n          stack[++top] = low;\n          stack[++top] = pivot - 1;\n        } //if there are elements on right side of pivot, push right side to stack\n\n\n        if (pivot + 1 < high) {\n          stack[++top] = pivot + 1;\n          stack[++top] = high;\n        }\n      }\n\n      this.setState({\n        array: list,\n        active1: 101,\n        active2: 101\n      });\n      return stack;\n    };\n\n    this.onStart = () => {\n      let algorithm = this.state.algorithm;\n\n      if (algorithm === 'bubblesort') {\n        this.bubblesort(this.state.array);\n      } else if (algorithm === 'selectionsort') {\n        this.selectionsort(this.state.array);\n      } else if (algorithm === 'insertionsort') {\n        this.insertionsort(this.state.array);\n      } else if (algorithm === 'mergesort') {\n        this.mergesort(this.state.array);\n      } else if (algorithm === 'heapsort') {\n        this.heapsort(this.state.array);\n      } else if (algorithm === 'quicksort') {\n        //this.quicksort(this.state.array, 0, this.state.array.length - 1);\n        //var arr = this.state.array.map(item => {return item.value})\n        //console.log(arr);\n        this.quicksort(this.state.array, 0, this.state.array.length - 1); //console.log(arr);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.handleNewArray();\n  }\n\n  sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleNewArray: this.handleNewArray,\n      onStart: this.onStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/doubleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DoubleContainer, {\n      array: this.state.array,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/multipleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultipleContainer, {\n      array: this.state.array,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SingleContainer, {\n      array: this.state.array,\n      arraySize: this.state.array.length,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      algorithm: this.state.algorithm,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js"],"names":["React","SingleContainer","DoubleContainer","MultipleContainer","Header","HashRouter","Router","Switch","Route","App","Component","state","array","animationArray","auxArray","active1","active2","algorithm","handleNewArray","arr","i","rand","Math","ceil","random","push","key","value","setState","algorithmSelection","event","target","timer","ms","Promise","res","setTimeout","bubblesort","list","delay","length","j","temp","selectionsort","min","insertionsort","slice","delayLoop","fn","name","mergesort","n","m","right","left","sorted","maxIndex","shift","x","y","concat","swap","items","leftIndex","rightIndex","heapsort","parseInt","index","quicksort","low","high","size","stack","Array","top","p","pivot","onStart","componentDidMount","sleep","milliseconds","date","Date","now","currentDate","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header';\n//import bubblesort from './algorithms/bubblesort';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n//const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  state = {\n    array: [], \n    animationArray: [],\n    auxArray: [],\n    active1: 101,\n    active2: 101,\n    algorithm: 'bubblesort',\n  }\n\n  handleNewArray = () => {\n    const arr = [];\n    for (var i = 0; i<100; i++){\n      var rand = Math.ceil(Math.random() * 100);\n      arr.push({key: i, value: rand});\n    }\n    this.setState({\n      array: arr\n    })\n  }\n\n  componentDidMount(){\n    this.handleNewArray();\n  }\n\n  algorithmSelection = (event) => {\n      this.setState({\n        algorithm: event.target.value\n      })\n    }\n\n  timer = (ms) => {\n    return new Promise(res => setTimeout(res, ms));\n  }\n\n  //bubble sort\n  bubblesort = async (list, delay) => {\n    const length = list.length;\n    for(var i = length - 1; i>=0; i--){\n      for(var j = 1; j<=i; j++){\n        \n        if(list[j-1].value > list[j].value){\n          let temp = list[j-1];\n          list[j-1] = list[j];\n          list[j] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[j-1].key,\n          active2: list[j].key\n        })\n        await this.timer(15);\n      }\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n  \n\n  selectionsort = async (list) => {\n    let length = list.length;\n  \n    for(var i = 0; i < length; i++) {\n        \n        var min = i;\n        for(var j = i + 1; j < length; j++) {\n            // Executing statement comparison\n            if(list[min].value > list[j].value) {\n                // Updating our current min index to iterate\n                min = j;\n            }\n            this.setState({\n              array: list,\n              active1: list[j].key,\n              active2: list[min].key\n            })\n            await this.timer(15)\n        }\n        \n        // Swaping values\n        if(min !== i) {\n            let temp = list[i];\n            list[i] = list[min];\n            list[min] = temp;\n        }\n    }\n    this.setState({\n      active1: 100,\n      active2: 100\n    })\n  \n    return list;\n  }\n\n  insertionsort = async (list) => {\n    let auxArray = list.slice();\n    let length = auxArray.length;\n    \n    for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          })\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {key: 100, value: auxArray[j].value};\n          j--;\n        }\n        auxArray[j + 1] = key;\n    }\n    \n    //get rid of active \"red\" bars\n    this.setState({\n      array: auxArray,\n      active1: 101,\n      active2: 101\n    })\n  }\n\n  //------------------------------ to implement --------------------------//\n\n\n  delayLoop = (fn, delay) => {\n    return (name) => {\n      setTimeout(() => {\n        fn(name);\n      }, delay * 1000);\n    }\n  }\n\n\n  sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n\n\n  mergesort = async (list) => {\n    var n = list.length;\n    var m = 1;\n    var right;\n    var left;\n    var sorted; \n    var maxIndex;\n    //var auxArray; \n\n    while (m < n){\n      var i = 0;\n      while(i< n - m){\n        //slice\n        left = list.slice(i, i+m);\n        maxIndex = Math.min(i+2*m, n);\n        right = list.slice(i+m, maxIndex);\n        sorted = [];\n        //auxArray = [];\n\n        //merge\n        while(left.length && right.length){\n          await this.timer(15);\n          \n          if(left[0].value <= right[0].value){\n            sorted.push(left.shift());\n          }else{\n            sorted.push(right.shift());\n          }\n\n        }\n\n        while(left.length){\n          sorted.push(left.shift());\n        }\n\n        while(right.length){\n          sorted.push(right.shift());\n        }\n\n\n\n        //recreate list, with sorted part\n        var x = list.slice(0, i);\n        var y = list.slice(maxIndex, list.length);\n        list = x.concat(sorted, y);\n        \n        await this.timer(15);\n        this.setState({\n          array: list,\n          active1: list[i].key,\n          active2: list[maxIndex-1].key\n        });\n\n        i = i + 2*m\n      }\n      m = m * 2;\n\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n\n  swap = (items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n  }\n\n\n  heapsort = async (list) => {\n    //var res = this.heapify(list);\n\n    for (var i = 1; i<list.length; i++){\n      //if child is bigger than parent\n      if(list[i].value > list[parseInt((i-1)/2)].value){\n        var j = i;\n\n        //while parent is smaller, swap child and parent\n        while(list[j].value > list[parseInt((j-1)/2)].value){\n          var temp = list[j];\n          list[j] = list[parseInt((j-1)/2)];\n          list[parseInt((j-1)/2)] = temp;\n\n          this.setState({\n            array: list,\n            active1: i,\n            active2: j\n          });\n          j = parseInt((j - 1) / 2);\n          await this.timer(15)\n        }\n      }\n    }\n   \n    var length = list.length;\n\n    for(var i = length - 1; i>0; i--){\n      //swap value of first index with last index\n      var temp = list[0];\n      list[0] = list[i];\n      list[i] = temp;\n\n      //maintaining heap property, after each swap \n      var j = 0;\n      var index;\n\n      while(true){\n        await this.timer(15);\n        \n        index = 2*j+1;\n\n        //if left child is smaller than right child, point index to right child\n        if(index < (i - 1) && list[index].value < list[index + 1].value){\n          index++;\n        }\n\n        //if parent is smaller than child, swap them with child having higher value\n        if(index < i && list[j].value < list[index].value){\n          temp = list[j];\n          list[j] = list[index];\n          list[index] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[i].key,\n          active2: list[j].key\n        });\n\n        j = index;\n        if(index >= i){\n          break;\n        }\n      }\n    }\n    this.setState({\n      array: list,\n      active1: 101,\n      active2: 101\n    });\n  }\n\n\n  quicksort = async (list, low, high) => {\n    var size = high - low + 1;\n\n    //create auxiliary stack\n    var stack = new Array(size);\n\n    //initialize top of the stack\n    var top = -1;\n\n    //push initial values of high and low to the stack\n    stack[++top] = low;\n    stack[++top] = high;\n\n    while(top >= 0){\n      high = stack[top--];\n      low = stack[top--];\n\n      //set pivot element in its correct position, in sorted array\n      //var pivot = this.partition(list, low, high);\n\n      // partition method\n      var p = list[high];\n      var i = low - 1;\n\n      for(var j = low; j<=high-1; j++){\n        if(list[j].value <= p.value){\n          i++;\n          await this.timer(20);\n          this.swap(list, i, j);\n          // var temp = list[i];\n          // list[i] = list[j];\n          // list[j] = temp;\n\n          this.setState({\n            array: list,\n            active1: p.key,\n            active2: j\n          })          \n        }\n      } \n\n      this.swap(list, i+1, high);\n      // temp = list[i+1];\n      // list[i+1] = list[high];\n      // list[high] = temp;\n\n      var pivot = i + 1;\n\n      //end of partition \n\n      await this.timer(20);\n      this.setState({\n        array: list,\n        active1: high,\n        active2: low\n      })\n\n      //if there are elements on left side of pivot, push left side to stack\n      if (pivot - 1 > low){\n        stack[++top] = low;\n        stack[++top] = pivot - 1;\n      }\n\n      //if there are elements on right side of pivot, push right side to stack\n      if (pivot+1 < high){\n        stack[++top] = pivot + 1;\n        stack[++top] = high;\n      }\n    }\n    this.setState({\n      array: list,\n      active1: 101,\n      active2: 101\n    })\n    return stack;\n  }\n\n\n  onStart = () => {\n    let algorithm = this.state.algorithm;\n    if(algorithm === 'bubblesort'){\n      this.bubblesort(this.state.array)\n    }else if (algorithm === 'selectionsort') {\n      this.selectionsort(this.state.array);\n    }else if(algorithm === 'insertionsort'){\n      this.insertionsort(this.state.array)\n    }else if(algorithm === 'mergesort'){\n      this.mergesort(this.state.array);\n    }else if(algorithm === 'heapsort'){\n      this.heapsort(this.state.array);\n    }else if(algorithm === 'quicksort'){\n      //this.quicksort(this.state.array, 0, this.state.array.length - 1);\n      //var arr = this.state.array.map(item => {return item.value})\n      //console.log(arr);\n      this.quicksort(this.state.array, 0, this.state.array.length - 1);\n      //console.log(arr);\n    }\n  };\n\n\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header handleNewArray={this.handleNewArray} onStart={this.onStart}/>\n          <Switch>\n            <Route path='/doubleContainer'> \n              <DoubleContainer array={this.state.array} />\n            </Route>\n            <Route path='/multipleContainer'> \n              <MultipleContainer array={this.state.array} />\n            </Route>\n            <Route path='/'> \n              <SingleContainer array={this.state.array} \n                arraySize={this.state.array.length} \n                active1={this.state.active1}\n                active2={this.state.active2}\n                algorithm={this.state.algorithm}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}