{"ast":null,"code":"var _jsxFileName = \"/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header'; //import bubblesort from './algorithms/bubblesort';\n\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\"; //const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      array: [],\n      array2: [],\n      array3: [],\n      array4: [],\n      auxArray: [],\n      active1: 101,\n      active2: 101,\n      algorithm: 'bubblesort',\n      algorithm2: 'insertionsort',\n      algorithm3: 'selectionsort',\n      algorithm4: 'heapsort'\n    };\n\n    this.handleNewArray = () => {\n      const arr = [];\n\n      for (var i = 0; i < 100; i++) {\n        var rand = Math.ceil(Math.random() * 100);\n        arr.push({\n          key: i,\n          value: rand\n        });\n      }\n\n      this.setState({\n        array: arr,\n        array2: arr.slice(),\n        array3: arr.slice(),\n        array4: arr.slice()\n      });\n    };\n\n    this.algorithmSelection = event => {\n      //console.log(event.target.name);\n      //var alg = event.target.name;\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.algorithmSelection2 = event => {\n      this.setState({\n        algorithm2: event.target.value\n      });\n    };\n\n    this.algorithmSelection3 = event => {\n      this.setState({\n        algorithm3: event.target.value\n      });\n    };\n\n    this.algorithmSelection4 = event => {\n      this.setState({\n        algorithm4: event.target.value\n      });\n    };\n\n    this.timer = ms => {\n      return new Promise(res => setTimeout(res, ms));\n    };\n\n    this.bubblesort = async (list, delay) => {\n      const length = list.length;\n\n      for (var i = length - 1; i >= 0; i--) {\n        for (var j = 1; j <= i; j++) {\n          if (list[j - 1].value > list[j].value) {\n            let temp = list[j - 1];\n            list[j - 1] = list[j];\n            list[j] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j - 1].key,\n            active2: list[j].key\n          });\n          await this.timer(15);\n        }\n\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.selectionsort = async list => {\n      let length = list.length;\n\n      for (var i = 0; i < length; i++) {\n        var min = i;\n\n        for (var j = i + 1; j < length; j++) {\n          // Executing statement comparison\n          if (list[min].value > list[j].value) {\n            // Updating our current min index to iterate\n            min = j;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[j].key,\n            active2: list[min].key\n          });\n          await this.timer(15);\n        } // Swaping values\n\n\n        if (min !== i) {\n          let temp = list[i];\n          list[i] = list[min];\n          list[min] = temp;\n        }\n      }\n\n      this.setState({\n        active1: 100,\n        active2: 100\n      });\n      return list;\n    };\n\n    this.insertionsort = async list => {\n      let auxArray = list.slice();\n      let length = auxArray.length;\n\n      for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          });\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {\n            key: 100,\n            value: auxArray[j].value\n          };\n          j--;\n        }\n\n        auxArray[j + 1] = key;\n      } //get rid of active \"red\" bars\n\n\n      this.setState({\n        array: auxArray,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.delayLoop = (fn, delay) => {\n      return name => {\n        setTimeout(() => {\n          fn(name);\n        }, delay * 1000);\n      };\n    };\n\n    this.mergesort = async list => {\n      var n = list.length;\n      var m = 1;\n      var right;\n      var left;\n      var sorted;\n      var maxIndex; //var auxArray; \n\n      while (m < n) {\n        var i = 0;\n\n        while (i < n - m) {\n          //slice\n          left = list.slice(i, i + m);\n          maxIndex = Math.min(i + 2 * m, n);\n          right = list.slice(i + m, maxIndex);\n          sorted = []; //auxArray = [];\n          //merge\n\n          while (left.length && right.length) {\n            await this.timer(15);\n\n            if (left[0].value <= right[0].value) {\n              sorted.push(left.shift());\n            } else {\n              sorted.push(right.shift());\n            }\n          }\n\n          while (left.length) {\n            sorted.push(left.shift());\n          }\n\n          while (right.length) {\n            sorted.push(right.shift());\n          } //recreate list, with sorted part\n\n\n          var x = list.slice(0, i);\n          var y = list.slice(maxIndex, list.length);\n          list = x.concat(sorted, y);\n          await this.timer(15);\n          this.setState({\n            array: list,\n            active1: list[i].key,\n            active2: list[maxIndex - 1].key\n          });\n          i = i + 2 * m;\n        }\n\n        m = m * 2;\n        this.setState({\n          active1: 101,\n          active2: 101\n        });\n      }\n\n      return list;\n    };\n\n    this.swap = (items, leftIndex, rightIndex) => {\n      var temp = items[leftIndex];\n      items[leftIndex] = items[rightIndex];\n      items[rightIndex] = temp;\n    };\n\n    this.heapsort = async list => {\n      //var res = this.heapify(list);\n      for (var i = 1; i < list.length; i++) {\n        //if child is bigger than parent\n        if (list[i].value > list[parseInt((i - 1) / 2)].value) {\n          var j = i; //while parent is smaller, swap child and parent\n\n          while (list[j].value > list[parseInt((j - 1) / 2)].value) {\n            var temp = list[j];\n            list[j] = list[parseInt((j - 1) / 2)];\n            list[parseInt((j - 1) / 2)] = temp;\n            this.setState({\n              array: list,\n              active1: i,\n              active2: j\n            });\n            j = parseInt((j - 1) / 2);\n            await this.timer(15);\n          }\n        }\n      }\n\n      var length = list.length;\n\n      for (var i = length - 1; i > 0; i--) {\n        //swap value of first index with last index\n        var temp = list[0];\n        list[0] = list[i];\n        list[i] = temp; //maintaining heap property, after each swap \n\n        var j = 0;\n        var index;\n\n        while (true) {\n          await this.timer(15);\n          index = 2 * j + 1; //if left child is smaller than right child, point index to right child\n\n          if (index < i - 1 && list[index].value < list[index + 1].value) {\n            index++;\n          } //if parent is smaller than child, swap them with child having higher value\n\n\n          if (index < i && list[j].value < list[index].value) {\n            temp = list[j];\n            list[j] = list[index];\n            list[index] = temp;\n          }\n\n          this.setState({\n            array: list,\n            active1: list[i].key,\n            active2: list[j].key\n          });\n          j = index;\n\n          if (index >= i) {\n            break;\n          }\n        }\n      }\n\n      this.setState({\n        array: list,\n        active1: 101,\n        active2: 101\n      });\n    };\n\n    this.quicksort = async (list, low, high) => {\n      var size = high - low + 1; //create auxiliary stack\n\n      var stack = new Array(size); //initialize top of the stack\n\n      var top = -1; //push initial values of high and low to the stack\n\n      stack[++top] = low;\n      stack[++top] = high;\n\n      while (top >= 0) {\n        high = stack[top--];\n        low = stack[top--]; //set pivot element in its correct position, in sorted array\n        //var pivot = this.partition(list, low, high);\n        // partition method\n\n        var p = list[high];\n        var i = low - 1;\n\n        for (var j = low; j <= high - 1; j++) {\n          if (list[j].value <= p.value) {\n            i++;\n            await this.timer(20);\n            this.swap(list, i, j); // var temp = list[i];\n            // list[i] = list[j];\n            // list[j] = temp;\n\n            this.setState({\n              array: list,\n              active1: p.key,\n              active2: j\n            });\n          }\n        }\n\n        this.swap(list, i + 1, high); // temp = list[i+1];\n        // list[i+1] = list[high];\n        // list[high] = temp;\n\n        var pivot = i + 1; //end of partition \n\n        await this.timer(20);\n        this.setState({\n          array: list,\n          active1: high,\n          active2: low\n        }); //if there are elements on left side of pivot, push left side to stack\n\n        if (pivot - 1 > low) {\n          stack[++top] = low;\n          stack[++top] = pivot - 1;\n        } //if there are elements on right side of pivot, push right side to stack\n\n\n        if (pivot + 1 < high) {\n          stack[++top] = pivot + 1;\n          stack[++top] = high;\n        }\n      }\n\n      this.setState({\n        array: list,\n        active1: 101,\n        active2: 101\n      });\n      return stack;\n    };\n\n    this.onStart = () => {\n      let algorithm = this.state.algorithm;\n      let algorithm2 = this.state.algorithm2;\n      let algorithm3 = this.state.algorithm3;\n      let algorithm4 = this.state.algorithm4;\n\n      if (algorithm === 'bubblesort') {\n        this.bubblesort(this.state.array);\n      } else if (algorithm === 'selectionsort') {\n        this.selectionsort(this.state.array);\n      } else if (algorithm === 'insertionsort') {\n        this.insertionsort(this.state.array);\n      } else if (algorithm === 'mergesort') {\n        this.mergesort(this.state.array);\n      } else if (algorithm === 'heapsort') {\n        this.heapsort(this.state.array);\n      } else if (algorithm === 'quicksort') {\n        this.quicksort(this.state.array, 0, this.state.array.length - 1);\n      }\n\n      if (algorithm2 === 'bubblesort') {\n        this.bubblesort(this.state.array2);\n      } else if (algorithm2 === 'selectionsort') {\n        this.selectionsort(this.state.array2);\n      } else if (algorithm2 === 'insertionsort') {\n        this.insertionsort(this.state.array2);\n      } else if (algorithm2 === 'mergesort') {\n        this.mergesort(this.state.array2);\n      } else if (algorithm2 === 'heapsort') {\n        this.heapsort(this.state.array2);\n      } else if (algorithm2 === 'quicksort') {\n        this.quicksort(this.state.array2, 0, this.state.array2.length - 1);\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.handleNewArray();\n  }\n\n  sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      handleNewArray: this.handleNewArray,\n      onStart: this.onStart,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/doubleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DoubleContainer, {\n      array: this.state.array,\n      array2: this.state.array2,\n      algorithm: this.state.algorithm,\n      algorithm2: this.state.algorithm2,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/multipleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MultipleContainer, {\n      array: this.state.array,\n      array2: this.state.array2,\n      array3: this.state.array3,\n      array4: this.state.array4,\n      algorithm: this.state.algorithm,\n      algorithm2: this.state.algorithm2,\n      algorithm3: this.state.algorithm3,\n      algorithm4: this.state.algorithm4,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SingleContainer, {\n      array: this.state.array,\n      active1: this.state.active1,\n      active2: this.state.active2,\n      algorithm: this.state.algorithm,\n      algorithmSelection: this.algorithmSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/diego_ramirezs/Documents/sorting/visualizer/src/App.js"],"names":["React","SingleContainer","DoubleContainer","MultipleContainer","Header","HashRouter","Router","Switch","Route","App","Component","state","array","array2","array3","array4","auxArray","active1","active2","algorithm","algorithm2","algorithm3","algorithm4","handleNewArray","arr","i","rand","Math","ceil","random","push","key","value","setState","slice","algorithmSelection","event","target","name","algorithmSelection2","algorithmSelection3","algorithmSelection4","timer","ms","Promise","res","setTimeout","bubblesort","list","delay","length","j","temp","selectionsort","min","insertionsort","delayLoop","fn","mergesort","n","m","right","left","sorted","maxIndex","shift","x","y","concat","swap","items","leftIndex","rightIndex","heapsort","parseInt","index","quicksort","low","high","size","stack","Array","top","p","pivot","onStart","componentDidMount","sleep","milliseconds","date","Date","now","currentDate","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport SingleContainer from './components/SingleContainer';\nimport DoubleContainer from './components/DoubleContainer';\nimport MultipleContainer from './components/MultipleContainer';\nimport Header from './components/Header';\n//import bubblesort from './algorithms/bubblesort';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n//const requestAnimationFrame = window.requestAnimationFrame\n\nclass App extends React.Component {\n  state = {\n    array: [], \n    array2: [],\n    array3: [],\n    array4: [],\n    auxArray: [],\n    active1: 101,\n    active2: 101,\n    algorithm: 'bubblesort',\n    algorithm2: 'insertionsort',\n    algorithm3: 'selectionsort',\n    algorithm4: 'heapsort',\n  }\n\n  handleNewArray = () => {\n    const arr = [];\n    for (var i = 0; i<100; i++){\n      var rand = Math.ceil(Math.random() * 100);\n      arr.push({key: i, value: rand});\n    }\n    this.setState({\n      array: arr, \n      array2: arr.slice(),\n      array3: arr.slice(),\n      array4: arr.slice()\n    })\n  }\n\n  componentDidMount(){\n    this.handleNewArray();\n  }\n\n  algorithmSelection = (event) => {\n    //console.log(event.target.name);\n    //var alg = event.target.name;\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  algorithmSelection2 = (event) => {\n    this.setState({\n      algorithm2: event.target.value\n    })\n  }\n\n  algorithmSelection3 = (event) => {\n    this.setState({\n      algorithm3: event.target.value\n    })\n  }\n\n  algorithmSelection4 = (event) => {\n    this.setState({\n      algorithm4: event.target.value\n    })\n  }\n\n\n  timer = (ms) => {\n    return new Promise(res => setTimeout(res, ms));\n  }\n\n  //bubble sort\n  bubblesort = async (list, delay) => {\n    const length = list.length;\n    for(var i = length - 1; i>=0; i--){\n      for(var j = 1; j<=i; j++){\n        \n        if(list[j-1].value > list[j].value){\n          let temp = list[j-1];\n          list[j-1] = list[j];\n          list[j] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[j-1].key,\n          active2: list[j].key\n        })\n        await this.timer(15);\n      }\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n  \n\n  selectionsort = async (list) => {\n    let length = list.length;\n  \n    for(var i = 0; i < length; i++) {\n        \n        var min = i;\n        for(var j = i + 1; j < length; j++) {\n            // Executing statement comparison\n            if(list[min].value > list[j].value) {\n                // Updating our current min index to iterate\n                min = j;\n            }\n            this.setState({\n              array: list,\n              active1: list[j].key,\n              active2: list[min].key\n            })\n            await this.timer(15)\n        }\n        \n        // Swaping values\n        if(min !== i) {\n            let temp = list[i];\n            list[i] = list[min];\n            list[min] = temp;\n        }\n    }\n    this.setState({\n      active1: 100,\n      active2: 100\n    })\n  \n    return list;\n  }\n\n  insertionsort = async (list) => {\n    let auxArray = list.slice();\n    let length = auxArray.length;\n    \n    for (let i = 1; i < length; i++) {\n        let key = list[i];\n        let j = i - 1;\n        while (j >= 0 && auxArray[j].value > key.value) {\n          this.setState({\n            array: auxArray,\n            active1: auxArray[j].key,\n            active2: auxArray[i].key\n          })\n          await this.timer(15);\n          auxArray[j + 1] = auxArray[j];\n          auxArray[j] = {key: 100, value: auxArray[j].value};\n          j--;\n        }\n        auxArray[j + 1] = key;\n    }\n    \n    //get rid of active \"red\" bars\n    this.setState({\n      array: auxArray,\n      active1: 101,\n      active2: 101\n    })\n  }\n\n  //------------------------------ to implement --------------------------//\n\n\n  delayLoop = (fn, delay) => {\n    return (name) => {\n      setTimeout(() => {\n        fn(name);\n      }, delay * 1000);\n    }\n  }\n\n\n  sleep(milliseconds) {\n    const date = Date.now();\n    let currentDate = null;\n    do {\n      currentDate = Date.now();\n    } while (currentDate - date < milliseconds);\n  }\n\n\n\n  mergesort = async (list) => {\n    var n = list.length;\n    var m = 1;\n    var right;\n    var left;\n    var sorted; \n    var maxIndex;\n    //var auxArray; \n\n    while (m < n){\n      var i = 0;\n      while(i< n - m){\n        //slice\n        left = list.slice(i, i+m);\n        maxIndex = Math.min(i+2*m, n);\n        right = list.slice(i+m, maxIndex);\n        sorted = [];\n        //auxArray = [];\n\n        //merge\n        while(left.length && right.length){\n          await this.timer(15);\n          \n          if(left[0].value <= right[0].value){\n            sorted.push(left.shift());\n          }else{\n            sorted.push(right.shift());\n          }\n\n        }\n\n        while(left.length){\n          sorted.push(left.shift());\n        }\n\n        while(right.length){\n          sorted.push(right.shift());\n        }\n\n\n\n        //recreate list, with sorted part\n        var x = list.slice(0, i);\n        var y = list.slice(maxIndex, list.length);\n        list = x.concat(sorted, y);\n        \n        await this.timer(15);\n        this.setState({\n          array: list,\n          active1: list[i].key,\n          active2: list[maxIndex-1].key\n        });\n\n        i = i + 2*m\n      }\n      m = m * 2;\n\n      this.setState({\n        active1: 101,\n        active2: 101\n      })\n    }\n    return list\n  }\n\n\n  swap = (items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n  }\n\n\n  heapsort = async (list) => {\n    //var res = this.heapify(list);\n\n    for (var i = 1; i<list.length; i++){\n      //if child is bigger than parent\n      if(list[i].value > list[parseInt((i-1)/2)].value){\n        var j = i;\n\n        //while parent is smaller, swap child and parent\n        while(list[j].value > list[parseInt((j-1)/2)].value){\n          var temp = list[j];\n          list[j] = list[parseInt((j-1)/2)];\n          list[parseInt((j-1)/2)] = temp;\n\n          this.setState({\n            array: list,\n            active1: i,\n            active2: j\n          });\n          j = parseInt((j - 1) / 2);\n          await this.timer(15)\n        }\n      }\n    }\n   \n    var length = list.length;\n\n    for(var i = length - 1; i>0; i--){\n      //swap value of first index with last index\n      var temp = list[0];\n      list[0] = list[i];\n      list[i] = temp;\n\n      //maintaining heap property, after each swap \n      var j = 0;\n      var index;\n\n      while(true){\n        await this.timer(15);\n        \n        index = 2*j+1;\n\n        //if left child is smaller than right child, point index to right child\n        if(index < (i - 1) && list[index].value < list[index + 1].value){\n          index++;\n        }\n\n        //if parent is smaller than child, swap them with child having higher value\n        if(index < i && list[j].value < list[index].value){\n          temp = list[j];\n          list[j] = list[index];\n          list[index] = temp;\n        }\n        this.setState({\n          array: list,\n          active1: list[i].key,\n          active2: list[j].key\n        });\n\n        j = index;\n        if(index >= i){\n          break;\n        }\n      }\n    }\n    this.setState({\n      array: list,\n      active1: 101,\n      active2: 101\n    });\n  }\n\n\n  quicksort = async (list, low, high) => {\n    var size = high - low + 1;\n\n    //create auxiliary stack\n    var stack = new Array(size);\n\n    //initialize top of the stack\n    var top = -1;\n\n    //push initial values of high and low to the stack\n    stack[++top] = low;\n    stack[++top] = high;\n\n    while(top >= 0){\n      high = stack[top--];\n      low = stack[top--];\n\n      //set pivot element in its correct position, in sorted array\n      //var pivot = this.partition(list, low, high);\n\n      // partition method\n      var p = list[high];\n      var i = low - 1;\n\n      for(var j = low; j<=high-1; j++){\n        if(list[j].value <= p.value){\n          i++;\n          await this.timer(20);\n          this.swap(list, i, j);\n          // var temp = list[i];\n          // list[i] = list[j];\n          // list[j] = temp;\n\n          this.setState({\n            array: list,\n            active1: p.key,\n            active2: j\n          })          \n        }\n      } \n\n      this.swap(list, i+1, high);\n      // temp = list[i+1];\n      // list[i+1] = list[high];\n      // list[high] = temp;\n\n      var pivot = i + 1;\n\n      //end of partition \n\n      await this.timer(20);\n      this.setState({\n        array: list,\n        active1: high,\n        active2: low\n      })\n\n      //if there are elements on left side of pivot, push left side to stack\n      if (pivot - 1 > low){\n        stack[++top] = low;\n        stack[++top] = pivot - 1;\n      }\n\n      //if there are elements on right side of pivot, push right side to stack\n      if (pivot+1 < high){\n        stack[++top] = pivot + 1;\n        stack[++top] = high;\n      }\n    }\n    this.setState({\n      array: list,\n      active1: 101,\n      active2: 101\n    })\n    return stack;\n  }\n\n\n  onStart = () => {\n    let algorithm = this.state.algorithm;\n    let algorithm2 = this.state.algorithm2;\n    let algorithm3 = this.state.algorithm3;\n    let algorithm4 = this.state.algorithm4;\n\n\n    if(algorithm === 'bubblesort'){\n      this.bubblesort(this.state.array)\n    }else if (algorithm === 'selectionsort') {\n      this.selectionsort(this.state.array);\n    }else if(algorithm === 'insertionsort'){\n      this.insertionsort(this.state.array)\n    }else if(algorithm === 'mergesort'){\n      this.mergesort(this.state.array);\n    }else if(algorithm === 'heapsort'){\n      this.heapsort(this.state.array);\n    }else if(algorithm === 'quicksort'){\n      this.quicksort(this.state.array, 0, this.state.array.length - 1);\n    }\n\n    if(algorithm2 === 'bubblesort'){\n      this.bubblesort(this.state.array2)\n    }else if (algorithm2 === 'selectionsort') {\n      this.selectionsort(this.state.array2);\n    }else if(algorithm2 === 'insertionsort'){\n      this.insertionsort(this.state.array2)\n    }else if(algorithm2 === 'mergesort'){\n      this.mergesort(this.state.array2);\n    }else if(algorithm2 === 'heapsort'){\n      this.heapsort(this.state.array2);\n    }else if(algorithm2 === 'quicksort'){\n      this.quicksort(this.state.array2, 0, this.state.array2.length - 1);\n    }\n  }\n\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Header handleNewArray={this.handleNewArray} onStart={this.onStart}/>\n          <Switch>\n            <Route path='/doubleContainer'> \n              <DoubleContainer \n                array={this.state.array} \n                array2={this.state.array2}\n                algorithm={this.state.algorithm}\n                algorithm2={this.state.algorithm2}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n            <Route path='/multipleContainer'> \n              <MultipleContainer \n                array={this.state.array} \n                array2={this.state.array2}\n                array3={this.state.array3} \n                array4={this.state.array4}\n                algorithm={this.state.algorithm}\n                algorithm2={this.state.algorithm2}\n                algorithm3={this.state.algorithm3}\n                algorithm4={this.state.algorithm4}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n            <Route path='/'> \n              <SingleContainer array={this.state.array} \n                active1={this.state.active1}\n                active2={this.state.active2}\n                algorithm={this.state.algorithm}\n                algorithmSelection={this.algorithmSelection}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}